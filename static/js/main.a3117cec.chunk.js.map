{"version":3,"sources":["Sidebar.js","Projection.js","About.js","Content.js","Layout.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","_Component","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","apply","arguments","_inherits","_createClass","key","value","props","setSidebarCanvas","side_canvas","handleSelectAlgorithm","bind","handleSelectModel","handleSelectDataset","e","v","target","selectAlgorithm","selectModel","selectDataset","_this","_this$props","sidebar_orientation","sidebar_image_size","grem","p","hover_index","mnist_labels","color_array","model_options","model_choice","dataset_options","dataset_choice","img_labels","algorithm_options","algorithm_choice","React","createElement","style","display","flexDirection","justifyContent","flexGrow","padding","alignItems","width","onChange","map","option","index","ref","height","background","concat","join","color","transition","onClick","toggleAbout","Component","pointInPolygon","require","mnist_tile_locations","_toConsumableArray","Array","n","i","process","mnist_images","src","img","document","Projection","call","handleResize","camera","aspect","updateProjectionMatrix","renderer","setSize","current_scale","getScaleFromZ","position","z","d3_x","x","d3_y","y","resize_transform","d3","translate","scale","view","mount","d3_zoom","transform","state","init","_assertThisInitialized","addPoints","setUpCamera","animate","getZFromScale","changeEmbeddings","message","parameters","undefined","fontface","hasOwnProperty","fontsize","borderThickness","borderColor","r","g","b","a","backgroundColor","textColor","canvas","context","getContext","clearRect","font","textWidth","measureText","beginPath","rect","stroke","fillStyle","strokeStyle","fill","fillText","texture","THREE","needsUpdate","spriteMaterial","useScreenCoordinates","prev_choice","new_choice","_this2","console","log","model_embedding_keys","ranges","start","sprite_side","end","sprite_number","push","embedding_chunks","range","slice","_loop","echunk","c","points","scene","children","numVertices","length","geometry","attributes","array","Float32Array","l","tween","TWEEN","to","easing","Quadratic","InOut","onUpdate","new_txt_embeddings","txt_points","vertices","vertex","Linear","None","rvFOV","degToRad","fov","Math","tan","camera_z_position","fov_height","d3_transform","k","set","new_size","input","scale1","domain","clamp","scale2","zoomScaler","point_group","material","uniforms","size","camera_z_start","img_embeddings","vFOV","xs","min_x","_","max_x","ys","min_y","max_y","max_x_from_center","m","abs","max_y_from_center","far","max","scaleExtent","on","zoomHandler","initial_scale","initial_transform","_this$props2","mnist_embeddings","label_chunks","loader","textures","t","load","flipY","magFilter","embedding","vert","positions","offsets","cluster","filtered","addAttribute","floor","repeat","sprite_image_size","greyTransparency","imageTransparency","clusterActive","vertexShader","fragmentShader","transparent","point_cloud","userData","sprite_index","add","pointsMaterial","_this$props3","txt_embeddings","pointsGeometry","colors","_step","_iterator","_createForOfIteratorHelper","s","done","point","text","setHSL","err","f","opacity","sizeAttenuation","vertexColors","pointsContainer","_step2","_this$props4","_iterator2","_this3","_this$props5","fetch","then","response","json","raw_points","_step3","_iterator3","coords","random","_this$props6","txt","mesh","light","_this$props7","spritey","makeTextSprite","hover_container","offset","frustumCulled","visible","digit_index","full_index","_this$props8","copyVector3sArray","highlight_container","highlights","remove","mouse_position","_this$props9","sidebar_ctx","sortIntersectsByDistanceToRay","intersects","mouse_vector","_ref","_ref2","_slicedToArray","mouseX","mouseY","mouseToThree","raycaster","setFromCamera","params","Points","threshold","intersectObjects","intersect","object","setHoverIndex","highlightPoint","fillRect","drawImage","intersects_text","selectedObject","getObjectByName","name","_this4","domElement","shiftKey","_d3$mouse","node","_d3$mouse2","checkIntersects","_this5","_this$props10","_ref3","_ref4","mouseToCoords","_ref5","_ref6","selectionPoints","addEventListener","lasso","clientX","clientY","checkinside","buttons","setFromPoints","line","polygon","pointsinside","reduce","_this$props11","setClearColor","appendChild","addBlankHighlightPoints","handleMouse","addTextPoints","requestAnimationFrame","render","prevProps","_this$props12","removeChild","_this6","_this$props13","overflow","About","left","top","right","bottom","paddingTop","overflowY","fontSize","lineHeight","className","textAlign","cursor","textDecoration","maxWidth","margin","Markdown","tb","lr","Layout","ww","wh","sidebar_height","show_about","checkHash","indexOf","setState","window","innerWidth","innerHeight","sidebar_mount","offsetHeight","imageSmoothingEnabled","ctx","history","pushState","location","pathname","hash","removeEventListener","clip_img_embeddings","clip_txt_embeddings","algorithm_embedding_keys","_this$state","sidebar_style","main_style","font_size","_objectSpread","scaler","general_style","Data","md08_umap_mnist_embeddings","embeddings","scaled_embeddings","scaleEmbeddings","Object","assign","App","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3117cec.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Sidebar extends Component {\n  componentDidMount() {\n    this.props.setSidebarCanvas(this.side_canvas)\n    this.handleSelectAlgorithm = this.handleSelectAlgorithm.bind(this)\n    this.handleSelectModel = this.handleSelectModel.bind(this)\n    this.handleSelectDataset = this.handleSelectDataset.bind(this)\n\n  }\n\n  handleSelectAlgorithm(e) {\n    let v = e.target.value\n    this.props.selectAlgorithm(v)\n  }\n\n  handleSelectModel(e) {\n    let v = e.target.value\n    this.props.selectModel(v)\n  }\n  handleSelectDataset(e) {\n    let v = e.target.value\n    this.props.selectDataset(v)\n  }\n\n  render() {\n    let {\n      sidebar_orientation,\n      sidebar_image_size,\n      grem,\n      p,\n      hover_index,\n      mnist_labels,\n      color_array,\n      model_options,\n      model_choice,\n      dataset_options,\n      dataset_choice,\n      algorithm_options,\n      algorithm_choice,\n      img_labels\n    } = this.props\n\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'space-between',\n          flexGrow: 1,\n        }}\n      >\n        <div>\n          {' '}\n          <div\n            style={{\n              padding: grem / 2,\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n            }}\n          >\n            <div>Emebedding Model:</div>\n            <select\n              style={{width:100}}\n              onChange={this.handleSelectModel}\n              value={model_options[model_choice]}\n            >\n              {model_options.map((option, index) => (\n                <option key={option} value={option}>\n                  {option}\n                </option>\n              ))}\n            </select>\n          </div>\n\n\n          <div\n            style={{\n              padding: grem / 2,\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n            }}\n          >\n            <div>Dataset:</div>\n            <select\n              style={{width:100}}\n              onChange={this.handleSelectDataset}\n              value={dataset_options[dataset_choice]}\n            >\n              {dataset_options.map((option, index) => (\n                <option key={option} value={option}>\n                  {option}\n                </option>\n              ))}\n            </select>\n          </div>\n\n\n          <div\n            style={{\n              display: 'flex',\n              flexDirection:\n                sidebar_orientation === 'horizontal' ? 'row' : 'column',\n            }}\n          >\n            <div>\n              <canvas\n                ref={side_canvas => {\n                  this.side_canvas = side_canvas\n                }}\n                width={sidebar_image_size}\n                height={sidebar_image_size}\n              />\n            </div>\n            <div style={{ flexGrow: 1 }}>\n              <div\n                style={{\n                  background: hover_index\n                    ? `rgb(${color_array[mnist_labels[hover_index]].join(',')})`\n                    : 'transparent',\n                  color: hover_index ? '#000' : '#fff',\n                  padding: p(grem / 4, grem / 2),\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                  transition: 'all 0.1s linear',\n                }}\n              >\n                <div>Label:</div>\n        \n                {hover_index ? <div>{img_labels[hover_index]}</div> : null}\n              </div>\n              <div\n                style={{\n                  padding: p(grem / 4, grem / 2),\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                }}\n              >\n                Image Index:\n                {hover_index ? <div>{hover_index}</div> : null}\n              </div>\n            </div>\n            <div\n            style={{\n              padding: p(grem / 4, grem / 2),\n             \n              justifyContent: 'space-between',\n            }}\n            >\n              <br /> <br /><br /> <br />\n              <b>Scroll up/down to zoom in/out, hover for more info on datapoints<br /> <br />\n              Image and Text are jointly embedded and visualized using UMAP\n              <br /> <br />\n              Label and index will be used if additional metadata is included.\n              </b></div>\n\n          </div>\n          \n        </div>\n        <div style={{ padding: grem / 2 }}>\n          <div>\n            A WIP Multimodal embedding viewer.{' '}\n            <button\n              onClick={() => {\n                this.props.toggleAbout(true)\n              }}\n            >\n              About\n            </button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Sidebar\n","import React, { Component } from 'react'\nimport * as THREE from 'three'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\nimport * as TWEEN from '@tweenjs/tween.js'\nvar pointInPolygon = require('point-in-polygon');\n//var polygon = [ [ 1, 1 ], [ 1, 2 ], [ 2, 2 ], [ 2, 1 ] ];\n\n//console.log(pointInPolygon([ 1.5, 1.5 ], polygon)); // true\n//console.log(pointInPolygon([ 4.9, 1.2 ], polygon)); // false\n//console.log(pointInPolygon([ 1.8, 1.1 ], polygon)); // true\n\n// Constants for sprite sheets - original\n/*let sprite_side = 73\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 14\nlet sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet mnist_tile_string = 'mnist_tile_solid_'\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n\nlet mnist_images = mnist_tile_locations.map(src => {\n  let img = document.createElement('img')\n  img.src = src\n  return img\n})*/\n/////////////////\n\nlet sprite_side = 16\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 1\nlet sprite_image_size = 4096/16\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 4096\n\nlet mnist_tile_string = 'highres_tile_'\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/sprites/${mnist_tile_string}${i}.png`\n)\n\nlet mnist_images = mnist_tile_locations.map(src => {\n  let img = document.createElement('img')\n  img.src = src\n  return img\n})\n\nlet zoomScaler = input => {\n  let scale1 = d3\n    .scaleLinear()\n    .domain([20, 5])\n    .range([50, 500])\n    .clamp(true)\n  let scale2 = d3\n    .scaleLinear()\n    .domain([2, 0.1])\n    .range([500, 5000])\n  if (input >= 5) {\n    return scale1(input)\n    // return 28\n  } else if (input <= 2) {\n     return scale2(input)\n    //return 28\n  } else {\n    return 28\n  }\n}\n\n\n\n    \nclass Projection extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.init = this.init.bind(this)\n    this.addPoints = this.addPoints.bind(this)\n    this.handleResize = this.handleResize.bind(this)\n    this.setUpCamera = this.setUpCamera.bind(this)\n    this.animate = this.animate.bind(this)\n    this.getScaleFromZ = this.getScaleFromZ.bind(this)\n    this.getZFromScale = this.getZFromScale.bind(this)\n    this.changeEmbeddings = this.changeEmbeddings.bind(this)\n  }\n\n    makeTextSprite( message, parameters )\n\n    {\n        if ( parameters === undefined ) parameters = {};\n        var fontface = parameters.hasOwnProperty(\"fontface\") ? parameters[\"fontface\"] : \"Cambria\";\n        var fontsize = parameters.hasOwnProperty(\"fontsize\") ? parameters[\"fontsize\"] : 18;\n        var borderThickness = parameters.hasOwnProperty(\"borderThickness\") ? parameters[\"borderThickness\"] : 4;\n        var borderColor = parameters.hasOwnProperty(\"borderColor\") ?parameters[\"borderColor\"] : { r:0, g:0, b:0, a:1.0 };\n        var backgroundColor = parameters.hasOwnProperty(\"backgroundColor\") ?parameters[\"backgroundColor\"] : { r:255, g:0, b:255, a:1.0 };\n        var textColor = parameters.hasOwnProperty(\"textColor\") ?parameters[\"textColor\"] : { r:0, g:0, b:0, a:1.0 };\n        var pad = 5\n        var canvas = document.createElement('canvas');\n        var context = canvas.getContext('2d');\n        //context.scale(this.getScaleFromZ(this.camera.position.z),this.getScaleFromZ(this.camera.position.z));\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        context.font = fontsize + \"px \" + fontface;\n        \n        var metrics = context.measureText( message );\n        var textWidth = metrics.width;\n        //context.canvas.width=metrics.width\n        context.beginPath();\n        context.rect(0, fontsize/2 -pad, borderThickness+textWidth +2*pad, fontsize + borderThickness+2*pad);\n        context.stroke();\n        context.fillStyle   = \"rgba(\" + backgroundColor.r + \",\" + backgroundColor.g + \",\" + backgroundColor.b + \",\" + backgroundColor.a + \")\";\n        context.strokeStyle = \"rgba(\" + borderColor.r + \",\" + borderColor.g + \",\" + borderColor.b + \",\" + borderColor.a + \")\";\n        context.fill()\n        context.stroke()\n        context.fillStyle = \"rgba(\"+textColor.r+\", \"+textColor.g+\", \"+textColor.b+\", 1.0)\";\n        context.fillText( message, borderThickness, fontsize + borderThickness,textWidth);\n\n        var texture = new THREE.Texture(canvas) \n        texture.needsUpdate = true;\n        var spriteMaterial = new THREE.SpriteMaterial( { map: texture, useScreenCoordinates: false } );\n        var sprite = new THREE.Sprite( spriteMaterial );\n        //sprite.scale.set(1 * fontsize, 0.05 * fontsize, 0.75 * fontsize);\n        return sprite;  \n    }\n  changeEmbeddings(prev_choice, new_choice) {\n\n\n    // assumes mnist embeddings has been updated\n    console.log(this.props.model_embedding_keys[new_choice]+'img_embeddings')\n\n    let ranges = []\n    for (let i = 0; i < sprite_number; i++) {\n      let start = i * sprite_size\n      let end = (i + 1) * sprite_size\n      if (i === sprite_number - 1) end = sprite_number * sprite_size\n      ranges.push([start, end])\n    }\n\n    let embedding_chunks = ranges.map(range =>\n      this.props[this.props.model_embedding_keys[new_choice]+'img_embeddings'].slice(\n        range[0],\n        range[1]\n      )\n    )\n\n    for (let c = 0; c < sprite_number; c++) {\n      let echunk = embedding_chunks[c]\n\n      let points = this.scene.children[0].children[c]\n      let numVertices = echunk.length\n      let position = points.geometry.attributes.position.array\n\n      let target = new Float32Array(numVertices * 3)\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 3) {\n        let x = echunk[i][0]\n        let y = echunk[i][1]\n        let z = 0\n        target[index] = x\n        target[index + 1] = y\n        target[index + 2] = z\n      }\n\n\n      let tween = new TWEEN.Tween(position)\n        .to(position, 1000)\n        .easing(TWEEN.Easing.Quadratic.InOut)\n      tween.onUpdate(function() {\n        points.geometry.attributes.position = new THREE.BufferAttribute(\n          position,\n          3\n        )\n\n        \n        points.geometry.attributes.position.needsUpdate = true // required after the first render\n      })\n      tween.start()\n    }\n  \n    let new_txt_embeddings = this.props[this.props.model_embedding_keys[new_choice]+'txt_embeddings']\n    let txt_points = this.scene.children[2].children[0]\n    let numVertices = new_txt_embeddings.length\n    let position = txt_points.geometry.vertices\n    let target = new Float32Array(numVertices * 3)\n    let vertices = []\n\n    for (let i = 0, index = 0; i < new_txt_embeddings.length; i++, index += 3) {\n      target[index] = new_txt_embeddings[i][0]\n      target[index + 1] = new_txt_embeddings[i][1]\n      target[index + 2] = 0.5\n      const vertex = new THREE.Vector3(new_txt_embeddings[i][0], new_txt_embeddings[i][1], 0.5);\n      vertices.push(vertex)\n\n    }\n\n    console.log(position,vertices)\n    let tween = new TWEEN.Tween(position)\n    .to(vertices, 1000)\n    .easing(TWEEN.Easing.Linear.None)\n  tween.onUpdate(function() {\n    txt_points.geometry.vertices = vertices\n    txt_points.geometry.position.needsUpdate = true // required after the first render\n    txt_points.geometry.vertices.needsUpdate = true\n  })\n  tween.start()\n\n  \n  \n  }\n\n  getZFromScale(scale) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\n    let scale_height = this.props.height / scale\n    let camera_z_position = scale_height / (2 * Math.tan(rvFOV / 2))\n    return camera_z_position\n  }\n\n  getScaleFromZ(camera_z_position) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\n    let half_fov_height = Math.tan(rvFOV / 2) * camera_z_position\n    let fov_height = half_fov_height * 2\n    let scale = this.props.height / fov_height\n    return scale\n  }\n\n  \n  handleResize = (width, height) => {\n    this.camera.aspect = width / height\n    this.camera.updateProjectionMatrix()\n    this.renderer.setSize(width, height)\n    let current_scale = this.getScaleFromZ(this.camera.position.z)\n    let d3_x = -(this.camera.position.x * current_scale) + this.props.width / 2\n    let d3_y = this.camera.position.y * current_scale + this.props.height / 2\n    var resize_transform = d3.zoomIdentity\n      .translate(d3_x, d3_y)\n      .scale(current_scale)\n    let view = d3.select(this.mount)\n    this.d3_zoom.transform(view, resize_transform)\n\n  }\n\n  zoomHandler() {\n    let d3_transform = d3.event.transform\n\n    let scale = d3_transform.k\n    let x = -(d3_transform.x - this.props.width / 2) / scale\n    let y = (d3_transform.y - this.props.height / 2) / scale\n    let z = this.getZFromScale(scale)\n    this.camera.position.set(x, y, z)\n\n    // point size scales at end of zoom\n    let new_size = zoomScaler(z)\n    let point_group = this.scene.children[0].children\n    for (let c = 0; c < point_group.length; c++) {\n      point_group[c].material.uniforms.size.value = new_size\n    }\n  }\n\n  setUpCamera() {\n    let { width, height, img_embeddings } = this.props\n\n    let aspect = this.camera.aspect\n    let vFOV = this.camera.fov\n    let rvFOV = THREE.Math.degToRad(vFOV)\n\n    let xs = img_embeddings.map(e => e[0])\n    let min_x = _.min(xs)\n    let max_x = _.max(xs)\n    let ys = img_embeddings.map(e => e[1])\n    let min_y = _.min(ys)\n    let max_y = _.max(ys)\n    let data_width = max_x - min_x\n    let data_center_x =  (max_x + min_x)/2\n    let data_height = max_y - min_y\n    let data_center_y =  (max_y + min_y)/2\n    let data_aspect = data_width / data_height\n\n    let max_x_from_center = _.max([min_x, max_x].map(m => Math.abs(m)))\n    let max_y_from_center = _.max([min_y, max_y].map(m => Math.abs(m)))\n\n    let max_center = Math.max(max_x_from_center, max_y_from_center)\n\n    let camera_z_start\n    if (data_aspect > aspect) {\n      //console.log(\"width is limiter\");\n      // camera_z_start = max_x_from_center / Math.tan(rvFOV / 2) / aspect\n    } else {\n       //console.log(\"height is limiter\");\n       //camera_z_start = max_y_from_center / Math.tan(rvFOV / 2)\n    }\n\n    camera_z_start = max_center / Math.tan(rvFOV / 2)\n\n    let far = camera_z_start \n    this.camera.far = far    \n    //this.camera.lookAt(new THREE.Vector3(-10 ,0,0)); // Set look at coordinate like this\n    \n    this.camera.position.set(0,0,camera_z_start*1.1); // Set position like this\n\n\n    // set up zoom\n    this.d3_zoom = d3\n      .zoom()\n      .scaleExtent([this.getScaleFromZ(far - 1), this.getScaleFromZ(0.1)])\n      .on('zoom', this.zoomHandler.bind(this))\n\n    let view = d3.select(this.mount)\n    this.view = view\n    view.call(this.d3_zoom)\n    let initial_scale = this.getScaleFromZ(this.camera.position.z)\n    var initial_transform = d3.zoomIdentity\n      .translate(width / 2, height / 2)\n      .scale(initial_scale)\n    this.d3_zoom.transform(view, initial_transform)\n  }\n\n  addPoints() {\n    let { mnist_embeddings,img_embeddings, mnist_labels, img_labels, color_array } = this.props\n\n    // split embeddings and labels into chunks to match sprites\n    let ranges = []\n    for (let i = 0; i < sprite_number; i++) {\n      let start = i * sprite_size\n      let end = (i + 1) * sprite_size\n      if (i === sprite_number - 1) end = sprite_number * sprite_size\n      ranges.push([start, end])\n    }\n\n    let embedding_chunks = ranges.map(range =>\n      img_embeddings.slice(range[0], range[1])\n    )\n    let label_chunks = ranges.map(range =>\n      mnist_labels.slice(range[0], range[1])\n    )\n\n    // load the textures\n    let loader = new THREE.TextureLoader()\n    this.textures = mnist_tile_locations.map(l => {\n      let t = loader.load(l)\n      t.flipY = false\n      t.magFilter = THREE.NearestFilter\n      // t.minFilter = THREE.LinearMipMapLinearFilter;\n      return t\n    })\n\n    let point_group = new THREE.Group()\n    for (let c = 0; c < sprite_number; c++) {\n      let echunk = embedding_chunks[c]\n      let lchunk = label_chunks[c]\n\n      let vertices = []\n      for (let v = 0; v < echunk.length; v++) {\n        let embedding = echunk[v]\n        let vert = new THREE.Vector3(embedding[0], embedding[1], 0)\n        vertices[v] = vert\n      }\n\n      let geometry = new THREE.BufferGeometry()\n\n      let numVertices = vertices.length\n      let positions = new Float32Array(numVertices * 3)\n      let offsets = new Float32Array(numVertices * 2)\n      let cluster = new Float32Array(numVertices * 3)\n      let filtered = new Float32Array(numVertices );\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\n      geometry.addAttribute('offset', new THREE.BufferAttribute(offsets, 2))\n      geometry.addAttribute('filter', new THREE.BufferAttribute(filtered, 1));\n      geometry.addAttribute('cluster', new THREE.BufferAttribute(cluster, 3));\n\n\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 3) {\n        let x = echunk[i][0]\n        let y = echunk[i][1]\n        let z = 0\n        positions[index] = x\n        positions[index + 1] = y\n        positions[index + 2] = z\n      }\n\n      // geometry.attributes.position.copyVector3sArray(vertices)\n\n      let texture_subsize = 1 / sprite_side\n\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 2) {\n        let x = ((i % sprite_side) * sprite_image_size) / sprite_actual_size\n        let y =\n          (Math.floor(i / sprite_side) * sprite_image_size) / sprite_actual_size\n        offsets[index] = x\n        offsets[index + 1] = y\n      }\n\n  \n        // Todo: connect cluster the array\n        //let clusterSelected = this.props.clusterTypeSelected;\n       // let clusterColors = this.props.settings.clusters.clusterColors;\n        // console.log(\"clusterSelected\",clusterSelected)\n        for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 1) {\n          // Images disable when are not visible\n          filtered[index] = 0.0;// default value to show all images\n\n          // Clusters visualization\n          let clusterSelected = 1\n          let clusterColors = [1,2,3,1,2,3]\n          if( clusterSelected !== \"-\" ){ \n              let clusterId = 2;\n              if(clusterId >= clusterColors.length){\n                cluster[index*3] = 1.0;\n                cluster[index*3 + 1] = 1.0;\n                cluster[index*3 + 2] = 1.0;\n              }else{\n                cluster[index*3] = 0;\n                cluster[index*3 + 1] = 1;\n                cluster[index*3 + 2] = 0;\n              }\n          }\n      }\n    \n      // uniforms\n      let uniforms = {\n        texture: { value: this.textures[c] },\n        repeat: { value: new THREE.Vector2(texture_subsize, texture_subsize) },\n        size: { value: this.sprite_image_size },\n        greyTransparency:{ value:1},\n        imageTransparency:{ value:0},\n        clusterActive:{ value:0.0}\n      };\n\n      let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        attribute vec3 cluster;\n        varying vec3 vCluster;\n        attribute float filteredActive;\n        varying float vFilteredActive;\n        uniform float clusterActive;\n        varying float vClusterActive;\n        uniform float size;\n        uniform float greyTransparency;\n        varying float vGreyTransparency;\n        uniform float imageTransparency;\n        varying float vImageTransparency;\n\n        void main() {\n          vOffset = offset;\n          vFilteredActive = filteredActive;\n          vCluster = cluster;\n          vClusterActive = clusterActive;\n          vGreyTransparency = greyTransparency;\n          vImageTransparency = imageTransparency;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`;\n\n      let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        varying vec3 vCluster;\n        varying float vClusterActive;\n        varying float vFilteredActive;\n        varying float vGreyTransparency;\n        varying float vImageTransparency;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\n          // make transparent images\n          if ( tex.a < 0.003 ) discard;\n\n          // Display clusters\n          vec4 replace_color = vec4(vCluster,1.0);\n          vec4 default_border_color = vec4(0.00392156863,0.00392156863,0.00392156863,0.0);\n          vec4 diff = tex - default_border_color;\n          float equality = float(dot(diff,diff) < 0.99 && vClusterActive > 0.9);\n          tex = mix( tex, replace_color, equality);\n           \n          // make transparent images\n          tex = mix( tex,  vec4(0.0,0.0,0.0,0.0), vImageTransparency);\n\n          // Grey images filter our selection \n          vec4 filterout_color = vec4(0.3,0.3,0.3,vGreyTransparency);\n          float filterout_equality = float(vFilteredActive > 0.9);\n          tex = mix( tex, filterout_color, filterout_equality );\n          gl_FragColor = tex; //* vec4(vColor, 1.0);\n        }`;\n      // material\n      let material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: vertex_shader,\n        fragmentShader: fragment_shader,\n        transparent: true\n      });\n\n      // point cloud\n      let point_cloud = new THREE.Points(geometry, material)\n      point_cloud.userData = { sprite_index: c }\n\n      point_group.add(point_cloud)\n\n\n      \n    }\n\n    this.scene.add(point_group)\n\n\n\n  }\n\n\n  addTextPoints() {\n    let { txt_embeddings, mnist_labels, img_labels, color_array } = this.props\n    let pointsMaterial;\n    \n\n        const pointsGeometry = new THREE.Geometry();\n        const colors = [];\n        let numVertices = txt_embeddings.length\n        let positions = new Float32Array(numVertices * 3)\n\n        for (let i = 0, index = 0; i < txt_embeddings.length; i++, index += 3) {\n          positions[index] = txt_embeddings[i][0]\n          positions[index + 1] = txt_embeddings[i][1]\n          positions[index + 2] = 0.5\n        }\n\n        pointsGeometry.position = positions\n        for (const point of txt_embeddings) {\n          const vertex = new THREE.Vector3(point[0], point[1], 0.5);\n          vertex.userData = { text: \"heyyyy\" }\n          pointsGeometry.vertices.push(vertex);\n          const color = new THREE.Color();\n          color.setHSL(0., 0.65, 0.5);\n          colors.push(color);\n          \n        \n      }\n        pointsGeometry.colors = colors;\n        pointsMaterial = new THREE.PointsMaterial({\n          // map: spriteMap,\n          size: 8,\n          opacity: 0.7,\n           transparent: true,\n          // blending: THREE.AdditiveBlending,\n          sizeAttenuation: false,\n          vertexColors: THREE.VertexColors,\n        });\n        const points = new THREE.Points(pointsGeometry, pointsMaterial);\n        this.pointsContainer = new THREE.Object3D();\n        this.pointsContainer.add(points);\n        this.scene.add(this.pointsContainer);\n      \n    }\n  \n  addImgPoints() {\n      let { img_embeddings, mnist_labels, img_labels, color_array } = this.props\n      let pointsMaterial;\n      \n  \n          const pointsGeometry = new THREE.Geometry();\n          const colors = [];\n  \n          for (const point of img_embeddings) {\n            const vertex = new THREE.Vector3(point[0], point[1], 0.5);\n            pointsGeometry.vertices.push(vertex);\n            const color = new THREE.Color();\n            color.setHSL(0.6, 1.0, 0.5);\n            colors.push(color);\n          \n        }\n          pointsGeometry.colors = colors;\n          pointsMaterial = new THREE.PointsMaterial({\n            // map: spriteMap,\n            size: 5,\n            // transparent: true,\n            // blending: THREE.AdditiveBlending,\n            sizeAttenuation: false,\n            vertexColors: THREE.VertexColors,\n          });\n          const points = new THREE.Points(pointsGeometry, pointsMaterial);\n          const pointsContainer = new THREE.Object3D();\n          pointsContainer.add(points);\n          this.scene.add(pointsContainer);\n        \n      }\n\n  addTextPointsold() {\n    let { mnist_embeddings,img_embeddings, mnist_labels, img_labels, color_array } = this.props\n    let pointsMaterial;\n\n    fetch('//fastforwardlabs.github.io/visualization_assets/word2vec_tsne_2d.json')\n      .then(response => response.json())\n      .then(raw_points => {\n        const pointsGeometry = new THREE.Geometry();\n        const colors = [];\n        for (const point of raw_points) {\n          const vertex = new THREE.Vector3(point.coords[0], point.coords[1], 0);\n          pointsGeometry.vertices.push(vertex);\n          const color = new THREE.Color();\n          color.setHSL(Math.random(), 1.0, 0.5);\n          colors.push(color);\n        }\n        pointsGeometry.colors = colors;\n        pointsMaterial = new THREE.PointsMaterial({\n          // map: spriteMap,\n          size: 2,\n          // transparent: true,\n          // blending: THREE.AdditiveBlending,\n          sizeAttenuation: false,\n          vertexColors: THREE.VertexColors,\n        });\n        const points = new THREE.Points(pointsGeometry, pointsMaterial);\n        const pointsContainer = new THREE.Object3D();\n        pointsContainer.add(points);\n        this.scene.add(pointsContainer);\n      });\n\n  }\n\n  addTextPoints2() {\n    let { txt_embeddings, mnist_labels, txt, color_array } = this.props\n\n      // Create a texture loader so we can load our image file\n      var loader = new THREE.TextureLoader();\n\n      // Load an image file into a custom material\n      var material = new THREE.MeshLambertMaterial({\n        //map: loader.load('https://s3.amazonaws.com/duhaime/blog/tsne-webgl/assets/cat.jpg')\n        map: loader.load('https://upload.wikimedia.org/wikipedia/commons/thumb/9/92/Location_dot_red.svg/1200px-Location_dot_red.svg.png')\n      });\n\n      // create a plane geometry for the image with a width of 10\n      // and a height that preserves the image's aspect ratio\n      var geometry = new THREE.PlaneGeometry(1, 1);\n\n      // combine our image geometry and material into a mesh\n      var mesh = new THREE.Mesh(geometry, material);\n\n      // set the position of the image mesh in the x,y,z dimensions\n      mesh.position.set(0,0,0)\n\n      // add the image to the scene\n      this.scene.add(mesh);\n\n      /**\n      * Lights\n      **/\n\n      // Add a point light with #fff color, .7 intensity, and 0 distance\n      var light = new THREE.PointLight( 0xffffff, 1, 0 );\n\n      // Specify the light's position\n      light.position.set(1, 1, 100 );\n\n      // Add the light to the scene\n      this.scene.add(light)\n\n  }\n\n\n\n  addtexts(){\n    let { txt, txt_embeddings } = this.props\n\n    for (let c = 0; c < txt_embeddings.length; c++){\n        var spritey = this.makeTextSprite( txt[c], \n\t\t{ fontsize: 18, textColor: {r:0, g:0, b:0, a:0.8}} );\n        spritey.position.set(txt_embeddings[c][0],txt_embeddings[c][1],0.5);\n        this.scene.add( spritey );\n    }\n\n  }\n\n\n  addBlankHighlightPoints() {\n    let hover_container = new THREE.Group();\n    this.scene.add(hover_container);\n\n    let vert = new THREE.Vector3(0, 0, 0);\n    let vertices = [vert];\n    let geometry = new THREE.BufferGeometry();\n    let numVertices = vertices.length;\n    var position = new Float32Array(numVertices * 3); // 3 coordinates per point\n    var offset = new Float32Array(numVertices * 2); // 2 coordinates per point\n    geometry.addAttribute('position', new THREE.BufferAttribute(position, 3));\n    geometry.addAttribute('offset', new THREE.BufferAttribute(offset, 2));\n\n    // all the attributes will be filled on hover\n    let texture_subsize = 1 / sprite_side;\n\n    // uniforms\n    let uniforms = {\n      texture: { value: this.textures[0] },\n      repeat: { value: new THREE.Vector2(texture_subsize, texture_subsize) },\n      size: { value: 200.0 }, //56\n    };\n\n    let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`;\n\n    let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\n          gl_FragColor = tex;\n        }`;\n\n    // material\n    var material = new THREE.ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: vertex_shader,\n      fragmentShader: fragment_shader,\n      transparent: true,\n    });\n\n    let point = new THREE.Points(geometry, material);\n    point.frustumCulled = false;\n\n    this.scene.children[1].visible = false;\n    this.scene.children[1].add(point);\n  }\n  highlightPoint(sprite_index, digit_index, full_index) {\n    let { model_embedding_keys, model_choice,img_embeddings } = this.props\n\n    let point = this.scene.children[1].children[0]\n\n    //let embedding = this.props[model_embedding_keys[model_choice]+'img_embeddings'][\n     // full_index\n    //]\n\n\n    let embedding = img_embeddings[\n      full_index\n    ]\n\n\n    let vert = new THREE.Vector3(embedding[0], embedding[1], 0)\n    let vertices = [vert]\n\n    var offsets = new Float32Array(2) // 2 coordinates per point\n\n    let x = ((digit_index % sprite_side) * sprite_image_size) / sprite_actual_size \n    let y = (Math.floor(digit_index / sprite_side) * sprite_image_size) / sprite_actual_size \n    offsets[0] = x\n    offsets[1] = y\n\n    point.geometry.attributes.position.copyVector3sArray(vertices)\n    point.geometry.attributes.position.needsUpdate = true // required after the first render\n    point.geometry.attributes.offset.array = offsets\n    point.geometry.attributes.offset.needsUpdate = true // required after the first render\n\n    // need to set attributes on geometry and uniforms on material\n    point.material.uniforms.texture.value = this.textures[sprite_index]\n  }\n\n  removeHighlights() {\n    let highlight_container = this.scene.children[1]\n    let highlights = highlight_container.children\n    highlight_container.remove(...highlights)\n  }\n\n  checkIntersects(mouse_position) {\n\n    let { width, height, sidebar_ctx, sidebar_image_size, txt, txt_embeddings } = this.props\n\n    function mouseToThree([mouseX, mouseY]) {\n      return new THREE.Vector3(\n        (mouseX / width) * 2 - 1,\n        -(mouseY / height) * 2 + 1,\n        1\n      )\n    }\n\n\n    this.getScaleFromZ(this.camera.position.z)\n\n    function sortIntersectsByDistanceToRay(intersects) {\n      return _.sortBy(intersects, 'distanceToRay')\n    }\n\n    let mouse_vector = mouseToThree(mouse_position)\n    this.raycaster.setFromCamera(mouse_vector, this.camera)\n    this.raycaster.params.Points.threshold = 0.25\n    let intersects = this.raycaster.intersectObjects(\n      this.scene.children[0].children\n    )\n\n    \n   //console.log(this.scene.children)\n    if (intersects[0]) {\n      console.log(\"hovered over image\")\n      let sorted_intersects = sortIntersectsByDistanceToRay(intersects)\n      let intersect = sorted_intersects[0]\n      let sprite_index = intersect.object.userData.sprite_index\n      let digit_index = intersect.index\n      let full_index = sprite_index * sprite_size + digit_index\n      this.props.setHoverIndex(full_index)\n      this.highlightPoint(sprite_index, digit_index, full_index)\n      this.scene.children[1].visible = true\n\n      sidebar_ctx.fillRect(0, 0, sidebar_image_size, sidebar_image_size)\n      sidebar_ctx.drawImage(\n        mnist_images[sprite_index],\n        // source rectangle\n        (digit_index % sprite_side) * sprite_image_size,\n        Math.floor(digit_index / sprite_side) * sprite_image_size,\n        sprite_image_size,\n        sprite_image_size,\n        // destination rectangle\n        0,\n        0,\n        sidebar_image_size,\n        sidebar_image_size\n      )\n    } else {\n      this.props.setHoverIndex(null)\n      this.scene.children[1].visible = false\n      sidebar_ctx.fillRect(0, 0, sidebar_image_size, sidebar_image_size)\n    }\n\n    let intersects_text = this.raycaster.intersectObjects(\n      this.scene.children[2].children\n    )\n    if (intersects_text[0]) {\n      console.log(\"hello\")\n      let sorted_intersects = sortIntersectsByDistanceToRay(intersects_text)\n      let intersect = sorted_intersects[0]\n      let text_index = intersect.object.userData\n      //this.pointsContainer.children[0].geometry.colors[intersect.index] = {r: 1, g: 0, b: 0}\n      this.pointsContainer.children[0].geometry.colors[intersect.index].r = 1\n      //console.log(intersect, txt[intersect.index],this.pointsContainer.children[0].geometry.colors[intersect.index].r)\n      \n      var selectedObject = this.scene.getObjectByName(\"tooltip\");\n      console.log(this.getScaleFromZ(this.camera.position.z))\n      this.scene.remove( selectedObject )\n      var mul = 120\n      //if (selectedObject === undefined){\n        var spritey = this.makeTextSprite( txt[intersect.index], \n          { fontsize: 18, textColor: {r:0, g:0, b:0, a:1},borderColor: {r:0, g:0, b:0, a:1},backgroundColor: {r:255, g:255, b:255, a:1}} );\n              spritey.position.set(txt_embeddings[intersect.index][0]+0.5,txt_embeddings[intersect.index][1]-0.5,0.5);\n              spritey.name = \"tooltip\"\n              spritey.scale.x=2/this.getScaleFromZ(this.camera.position.z)*mul\n              spritey.scale.y=1/this.getScaleFromZ(this.camera.position.z)*mul\n      \n              this.scene.add( spritey );  \n      //}\n     \n      console.log(this.scene.children[0])\n    } else {\n      var selectedObject = this.scene.getObjectByName(\"tooltip\");\n      this.scene.remove( selectedObject )\n      }\n  }\n\n  handleMouse() {\n    let view = d3.select(this.renderer.domElement)\n\n    this.raycaster = new THREE.Raycaster()\n\n    view.on('mousemove', () => {\n    if(!d3.event.shiftKey){\n        let [mouseX, mouseY] = d3.mouse(view.node())\n        let mouse_position = [mouseX, mouseY]\n        this.checkIntersects(mouse_position)\n    }})\n  }\n\n  handlelasso(){\n\n    let { width, height, sidebar_ctx, sidebar_image_size } = this.props\n\n    function mouseToThree([mouseX, mouseY],scale) {\n      return new THREE.Vector3(\n        scale*(( mouseX /width ) * 2 - 1.5),\n        -scale*((mouseY / height) * 2 - 1),\n        1\n      )\n    }\n\n    function mouseToCoords([mouseX, mouseY],scale) {\n        return [\n          scale*(( mouseX /width ) * 2 - 1.5),\n          -scale*((mouseY / height) * 2 - 1),\n        ]\n      }\n\n\n\n    this.selectionPoints = [];\n    const material = new THREE.LineBasicMaterial( { color: 0x0000ff } );\n            \n\n\n\n\tthis.renderer.domElement.addEventListener( 'pointerdown', e => {\n        this.lasso = [];\n\t\tthis.selectionPoints.length = 0;\n        this.points = []\n        this.points.push( mouseToCoords([e.clientX, e.clientY ],this.getScaleFromZ(this.camera.position.z)) );\n        this.lasso.push( mouseToThree([e.clientX, e.clientY ],this.getScaleFromZ(this.camera.position.z)) );\n\n        \n\t} );\n\n\tthis.renderer.domElement.addEventListener( 'pointerup', () => {\n        console.log(this.points)\n        let { img_embeddings } = this.props\n        this.checkinside(img_embeddings, this.points)\n        \n        \n    })\n\n    this.renderer.domElement.addEventListener( 'pointermove', e => {\n\n\t\t// If the left mouse button is not pressed\n\t\tif ( ( 1 & e.buttons ) === 0 ) {\n\n\t\t\treturn;\n\n\t\t}\n        this.points.push(mouseToCoords([e.clientX, e.clientY ],this.getScaleFromZ(this.camera.position.z)));    \n        this.lasso.push(mouseToThree([e.clientX, e.clientY ],this.getScaleFromZ(this.camera.position.z)));    \n\n        const geometry = new THREE.BufferGeometry().setFromPoints( this.lasso );\n\n        const line = new THREE.Line( geometry, material );\n        this.scene.add( line );\n    \n    } );\n\n  }\n\n  checkinside(points, polygon){\n    var pointsinside = points.map(point => {\n        return pointInPolygon(point, polygon);\n    });\n    const arrsum = arr => arr.reduce((a,b) => a*1.0 + b*1.0, 0)\n    console.log(arrsum(pointsinside))\n\n    \n\n\n  }\n\n\n  init() {\n    let { width, height } = this.props\n\n    this.scene = new THREE.Scene()\n    this.scene.background = new THREE.Color( '#ffffff' );\n\n\n    let vFOV = 15\n    let aspect = width / height\n    let near = 0.02\n    let far = 1000\n\n    this.camera = new THREE.PerspectiveCamera(vFOV, aspect, near, far)\n    this.renderer = new THREE.WebGLRenderer()\n    this.renderer.setClearColor(0x111111, 1)\n    this.renderer.setSize(width, height)\n    this.mount.appendChild(this.renderer.domElement)\n\n    this.addPoints()\n\n    this.addBlankHighlightPoints()\n\n    this.setUpCamera()\n\n    this.animate()\n\n    this.handleMouse()\n\n    //this.addtexts()\n    this.addTextPoints()\n    //this.addImgPoints()\n    //this.handlelasso()\n\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate)\n    TWEEN.update()\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  componentDidMount() {\n    this.init()\n  }\n\n  componentDidUpdate(prevProps) {\n\n    let { width, height } = this.props\n    if (width !== prevProps.width || height !== prevProps.height) {\n      this.handleResize(width, height)\n    }\n    if (prevProps.model_choice !== this.props.model_choice) {\n      this.changeEmbeddings(\n        prevProps.model_choice,\n        this.props.model_choice\n      )\n    }\n  }\n\n  componentWillUnmount() {\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\n  render() {\n    let { width, height } = this.props\n    return (\n      <div\n        style={{ width: width, height: height, overflow: 'hidden' }}\n        ref={mount => {\n          this.mount = mount\n        }}\n      />\n    )\n  }\n}\n\nexport default Projection\n","import React, { Component } from 'react'\nimport Markdown from 'react-remarkable'\nimport { about_text } from './Content'\n\nclass About extends Component {\n  render() {\n    let { grem, p } = this.props\n    return (\n      <div\n        style={{\n          position: 'fixed',\n          left: 0,\n          top: 0,\n          right: 0,\n          bottom: 0,\n          background: '#222',\n          color: '#fff',\n          paddingTop: grem * 2,\n          overflowY: 'auto',\n          fontSize: 16,\n          lineHeight: 1.5,\n        }}\n      >\n        <div\n          style={{\n            background: '#333',\n            position: 'fixed',\n            left: 0,\n            top: 0,\n            right: 0,\n            padding: grem / 2,\n          }}\n        >\n          About\n          <button\n            onClick={() => {\n              this.props.toggleAbout(false)\n            }}\n            className=\"hover-555\"\n            style={{\n              position: 'absolute',\n              right: 0,\n              top: 0,\n              height: grem * 2,\n              width: grem * 2,\n              padding: grem / 2,\n              textAlign: 'center',\n              cursor: 'pointer',\n              textDecoration: 'none',\n            }}\n          >\n            &times;\n          </button>\n        </div>\n        <div\n          style={{\n            maxWidth: grem * 30,\n            margin: '0 auto',\n            padding: grem / 2,\n            color: '#fff',\n          }}\n        >\n          <Markdown>{about_text}</Markdown>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default About\n","export let about_text = `\n# About EmbedAnything\nThis is an interactive visualization that embeds, clusters and analyses multimodal data.`\n","import React, { Component } from 'react'\nimport Sidebar from './Sidebar'\nimport Projection from './Projection'\nimport About from './About'\nimport * as _ from 'lodash'\n\n// padding constructor\nfunction p(tb, lr) {\n  return `${tb}px ${lr}px`\n}\n\nlet color_array = [\n  [141, 211, 199],\n  [255, 255, 179],\n  [190, 186, 218],\n  [251, 128, 114],\n  [128, 177, 211],\n  [253, 180, 98],\n  [179, 222, 105],\n  [252, 205, 229],\n  [188, 128, 189],\n  [141, 211, 199],\n  [255, 255, 179],\n  [190, 186, 218],\n  [251, 128, 114],\n  [128, 177, 211],\n  [253, 180, 98],\n  [179, 222, 105],\n  [252, 205, 229],\n  [188, 128, 189],\n  [141, 211, 199],\n  [255, 255, 179],\n  [190, 186, 218],\n  [251, 128, 114],\n  [128, 177, 211],\n  [253, 180, 98],\n  [179, 222, 105],\n  [252, 205, 229],\n  [188, 128, 189],\n  [141, 211, 199],\n  [255, 255, 179],\n  [190, 186, 218],\n  [251, 128, 114],\n  [128, 177, 211],\n  [253, 180, 98],\n  [179, 222, 105],\n  [252, 205, 229],\n  [188, 128, 189],\n  [141, 211, 199],\n  [255, 255, 179],\n  [190, 186, 218],\n  [251, 128, 114],\n  [128, 177, 211],\n  [253, 180, 98],\n  [179, 222, 105],\n  [252, 205, 229],\n  [188, 128, 189],\n  [141, 211, 199],\n  [255, 255, 179],\n  [190, 186, 218],\n  [251, 128, 114],\n  [128, 177, 211],\n  [253, 180, 98],\n  [179, 222, 105],\n  [252, 205, 229],\n  [188, 128, 189],\n  [141, 211, 199],\n  [255, 255, 179],\n  [190, 186, 218],\n  [251, 128, 114],\n  [128, 177, 211],\n  [253, 180, 98],\n  [179, 222, 105],\n  [252, 205, 229],\n  [188, 128, 189],\n]\n\nclass Layout extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ww: null,\n      wh: null,\n      sidebar_height: null,\n      hover_index: null,\n      show_about: null,\n      algorithm_choice: 0,\n      model_choice:0,\n      dataset_choice:0\n    }\n    this.sidebar_ctx = null\n    this.setSize = _.debounce(this.setSize.bind(this), 200)\n    this.checkHash = this.checkHash.bind(this)\n    this.setSidebarCanvas = this.setSidebarCanvas.bind(this)\n    this.toggleAbout = this.toggleAbout.bind(this)\n    this.selectAlgorithm = this.selectAlgorithm.bind(this)\n    this.selectModel = this.selectModel.bind(this)\n    this.selectDataset = this.selectDataset.bind(this)\n  }\n\n  selectAlgorithm(v) {\n    let i = this.props.algorithm_options.indexOf(v)\n    this.setState({ algorithm_choice: i })\n  }\n\n  selectModel(v) {\n    let i = this.props.model_options.indexOf(v)\n    this.setState({ model_choice: i })\n  }\n\n  selectDataset(v) {\n    let i = this.props.dataset_options.indexOf(v)\n    console.log(this.props.dataset_options)\n    this.setState({ dataset_choice: i })\n  }\n\n\n  setSize() {\n    this.setState({ ww: window.innerWidth, wh: window.innerHeight })\n    let sidebar_height = this.sidebar_mount.offsetHeight\n    this.setState({ sidebar_height: sidebar_height })\n    if (this.sidebar_ctx) this.sidebar_ctx.imageSmoothingEnabled = false\n  }\n\n  setSidebarCanvas(canvas) {\n    let ctx = canvas.getContext('2d')\n    ctx.imageSmoothingEnabled = false\n    this.sidebar_ctx = ctx\n  }\n\n  toggleAbout(state) {\n    if (state === true) {\n      window.history.pushState(null, 'About UMAP Explorer', '#about')\n      this.setState({ show_about: true })\n    } else if (state === false) {\n      window.history.pushState(null, 'UMAP Explorer', window.location.pathname)\n      this.setState({ show_about: false })\n    }\n  }\n\n  setHoverIndex(hover_index) {\n    this.setState({ hover_index: hover_index })\n  }\n\n  componentWillMount() {\n    this.setSize()\n    this.checkHash()\n  }\n\n  checkHash() {\n    if (window.location.hash && window.location.hash === '#about') {\n      this.setState({ show_about: true })\n    } else {\n      this.setState({ show_about: false })\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.setSize)\n    window.addEventListener('popstate', this.checkHash)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setSize)\n  }\n\n  ////////\n  render() {\n    let {\n      mnist_embeddings,\n      txt,\n      txt_embeddings,\n      img_embeddings,\n      clip_img_embeddings,\n      clip_txt_embeddings,\n      mnist_labels,\n      algorithm_options,\n      model_options,\n      dataset_options,\n      algorithm_embedding_keys,\n      model_embedding_keys,\n      img_labels\n    } = this.props\n    let {\n      ww,\n      wh,\n      sidebar_height,\n      hover_index,\n      show_about,\n      model_choice,\n      algorithm_choice,\n      dataset_choice\n    } = this.state\n    let sidebar_ctx = this.sidebar_ctx\n\n    let line_height = 1.5\n\n    let sidebar_style = {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      height: '100vh',\n      overflow: 'auto',\n      background: '#222',\n      display: 'flex',\n      flexDirection: 'column',\n    }\n    let main_style = {\n      position: 'relative',\n      height: '100vh',\n      background: '#111',\n      overflow: 'hidden',\n    }\n\n    let sidebar_image_size, sidebar_orientation\n    let font_size = 16\n    if (ww < 800) {\n      font_size = 14\n      sidebar_style = {\n        ...sidebar_style,\n        flexDirection: 'row',\n        width: '100%',\n        top: 'auto',\n        height: 'auto',\n        bottom: 0,\n      }\n      main_style = { width: ww, height: wh - sidebar_height }\n      sidebar_image_size = font_size * line_height * 3\n      sidebar_orientation = 'horizontal'\n    } else if (ww < 800 + 600) {\n      let scaler = 200 + (300 - 200) * ((ww - 800) / 600)\n      font_size = 14 + 2 * ((ww - 800) / 600)\n      sidebar_style = {\n        ...sidebar_style,\n        width: scaler,\n      }\n      sidebar_image_size = sidebar_style.width\n      main_style = {\n        ...main_style,\n        width: ww - scaler,\n        left: scaler,\n        height: wh,\n      }\n      sidebar_orientation = 'vertical'\n    } else {\n      sidebar_style = {\n        ...sidebar_style,\n        width: 300,\n      }\n      main_style = {\n        ...main_style,\n        width: ww - 300,\n        left: 300,\n        height: wh,\n      }\n      sidebar_image_size = sidebar_style.width\n      sidebar_orientation = 'vertical'\n    }\n\n    let grem = font_size * line_height\n\n    let general_style = {\n      fontSize: font_size,\n      lineHeight: line_height,\n    }\n\n    return ww !== null ? (\n      <div style={general_style}>\n        <div\n          style={sidebar_style}\n          ref={sidebar_mount => {\n            this.sidebar_mount = sidebar_mount\n          }}\n        >\n          <Sidebar\n            sidebar_orientation={sidebar_orientation}\n            sidebar_image_size={sidebar_image_size}\n            grem={grem}\n            p={p}\n            color_array={color_array}\n            setSidebarCanvas={this.setSidebarCanvas}\n            hover_index={hover_index}\n            mnist_labels={mnist_labels}\n            txt={txt}\n            toggleAbout={this.toggleAbout}\n            algorithm_options={algorithm_options}\n            algorithm_choice={algorithm_choice}\n            selectAlgorithm={this.selectAlgorithm}\n            model_options={model_options}\n            model_choice={model_choice}\n            selectModel={this.selectModel}\n            dataset_options={dataset_options}\n            dataset_choice={dataset_choice}\n            selectDataset={this.selectDataset}\n            img_labels={img_labels}\n          />\n        </div>\n        <div style={main_style}>\n          <Projection\n            width={main_style.width}\n            height={main_style.height}\n            mnist_embeddings={mnist_embeddings}\n            txt={txt}\n            txt_embeddings={txt_embeddings} \n            img_embeddings={img_embeddings} \n            clip_img_embeddings={clip_img_embeddings}\n            clip_txt_embeddings={clip_txt_embeddings}\n            mnist_labels={mnist_labels}\n            color_array={color_array}\n            sidebar_ctx={sidebar_ctx}\n            sidebar_image_size={sidebar_image_size}\n            setHoverIndex={this.setHoverIndex.bind(this)}\n            algorithm_embedding_keys={algorithm_embedding_keys}\n            algorithm_choice={algorithm_choice}\n            model_embedding_keys={model_embedding_keys}\n            model_choice={model_choice}\n          />\n        </div>\n        {show_about ? (\n          <About grem={grem} p={p} toggleAbout={this.toggleAbout} />\n        ) : null}\n      </div>\n    ) : (\n      <div style={{ padding: '1rem' }}>Loading projections...</div>\n    )\n  }\n}\n\nexport default Layout\n","import React, { Component } from 'react'\nimport Layout from './Layout'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\n\nlet algorithm_options = ['UMAP',]\nlet algorithm_embedding_keys = [\n  'mnist_embeddings',\n]\n\nlet model_options = ['Imagebind']//, 'CLIP']\nlet model_embedding_keys = [\n  '',\n  'clip_',\n]\n\nlet dataset_options = ['Visiogender']\n\n\nclass Data extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      mnist_embeddings: null,\n      mnist_labels: null,\n      md08_umap_mnist_embeddings: null,\n      txt_embeddings: null,\n    }\n  }\n\n  scaleEmbeddings(embeddings) {\n    let xs = embeddings.map(e => Math.abs(e[0]))\n    let ys = embeddings.map(e => Math.abs(e[1]))\n    let max_x = _.max(xs)\n    let max_y = _.max(ys)\n    let max = Math.max(max_x, max_y)\n    let scale = d3\n      .scaleLinear()\n      .domain([-max, max])\n      .range([-20, 20])\n    let scaled_embeddings = embeddings.map(e => [scale(e[0]), scale(e[1])])\n    return scaled_embeddings\n  }\n\n  componentDidMount() {\n    fetch(`${process.env.PUBLIC_URL}/mnist_embeddings.json`)\n      .then(response => response.json())\n      .then(mnist_embeddings => {\n        let scaled_embeddings = this.scaleEmbeddings(mnist_embeddings)\n        this.setState({\n          mnist_embeddings: scaled_embeddings,\n        })\n      })\n    fetch(`${process.env.PUBLIC_URL}/clip_img_embeddings.json`)\n      .then(response => response.json())\n      .then(clip_img_embeddings => {\n        let scaled_embeddings = this.scaleEmbeddings(clip_img_embeddings)\n        console.log('got em')\n        this.setState({\n          clip_img_embeddings: scaled_embeddings,\n        })\n      })\n    fetch(`${process.env.PUBLIC_URL}/clip_txt_embeddings.json`)\n      .then(response => response.json())\n      .then(clip_txt_embeddings => {\n        let scaled_embeddings = this.scaleEmbeddings(clip_txt_embeddings)\n        this.setState({\n          clip_txt_embeddings: scaled_embeddings,\n        })\n      })\n\n      fetch(`${process.env.PUBLIC_URL}/img_labels.json`)\n      .then(response => response.json())\n      .then(img_labels => {\n        this.setState({\n          img_labels: img_labels\n        })\n      })\n\n    fetch(`${process.env.PUBLIC_URL}/mnist_labels.json`)\n      .then(response => response.json())\n      .then(mnist_labels =>\n        this.setState({\n          mnist_labels: mnist_labels,\n        })\n      )\n\n      fetch(`${process.env.PUBLIC_URL}/txt_embeddings.json`)\n      .then(response => response.json())\n      .then(txt_embeddings => {\n        let scaled_embeddings = this.scaleEmbeddings(txt_embeddings)\n        this.setState({\n          txt_embeddings: scaled_embeddings,\n        })\n      })\n\n\n      fetch(`${process.env.PUBLIC_URL}/txt.json`)\n      .then(response => response.json())\n      .then(txt => {\n        this.setState({\n          txt: txt,\n        })\n      })\n\n      fetch(`${process.env.PUBLIC_URL}/img_embeddings.json`)\n      .then(response => response.json())\n      .then(img_embeddings => {\n        let scaled_embeddings = this.scaleEmbeddings(img_embeddings)\n        this.setState({\n          img_embeddings: scaled_embeddings,\n        })\n      })\n\n\n\n      \n  }\n\n  \n\n  render() {\n    return this.state.mnist_embeddings && this.state.mnist_labels ? (\n      <Layout\n        {...this.state}\n        algorithm_options={algorithm_options}\n        model_options={model_options}\n        dataset_options={dataset_options}\n        algorithm_embedding_keys={algorithm_embedding_keys}\n        model_embedding_keys={model_embedding_keys}\n      />\n    ) : (\n      <div style={{ padding: '1rem' }}>Loading data...</div>\n    )\n  }\n}\n\nexport default Data\n","import React, { Component } from 'react'\nimport './App.css'\nimport Data from './Data'\n\nclass App extends Component {\n  render() {\n    return <Data />\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}