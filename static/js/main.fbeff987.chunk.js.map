{"version":3,"sources":["Sidebar.js","Projection.js","About.js","Content.js","Layout.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","_Component","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","apply","arguments","_inherits","_createClass","key","value","props","setSidebarCanvas","side_canvas","handleSelectAlgorithm","bind","handleSelectModel","handleSelectDataset","handleChangScaleMin","e","v","target","selectAlgorithm","selectModel","selectDataset","selectScaleMin","console","log","_this","_this$props","sidebar_orientation","sidebar_image_size","grem","p","hover_index","color_array","mnist_labels","model_options","model_choice","dataset_options","dataset_choice","img_labels","algorithm_options","algorithm_choice","scaleMin","React","createElement","style","display","flexDirection","justifyContent","flexGrow","padding","alignItems","width","onChange","map","option","index","ref","height","background","concat","Math","round","random","join","color","transition","id","overflowY","float","Slider","aria-label","onClick","toggleAbout","Component","pointInPolygon","require","mnist_tile_locations","_toConsumableArray","Array","n","i","process","mnist_images","src","img","document","Projection","call","handleResize","camera","aspect","updateProjectionMatrix","renderer","setSize","current_scale","getScaleFromZ","position","z","d3_x","x","d3_y","y","resize_transform","d3","translate","scale","view","mount","d3_zoom","transform","state","init","_assertThisInitialized","addPoints","setUpCamera","animate","getZFromScale","changeEmbeddings","input","scaleMax","domain","range","clamp","scaleProj","message","parameters","undefined","fontface","hasOwnProperty","fontsize","borderThickness","borderColor","r","g","b","a","backgroundColor","textColor","canvas","context","getContext","clearRect","font","textWidth","measureText","beginPath","rect","stroke","fillStyle","strokeStyle","fill","fillText","texture","THREE","needsUpdate","spriteMaterial","useScreenCoordinates","prev_choice","new_choice","_this2","model_embedding_keys","ranges","start","sprite_side","end","sprite_number","push","embedding_chunks","slice","_loop","echunk","c","points","scene","children","numVertices","length","geometry","attributes","array","Float32Array","l","tween","TWEEN","to","easing","Quadratic","InOut","onUpdate","new_txt_embeddings","txt_points","vertices","vertex","Linear","None","rvFOV","degToRad","fov","tan","camera_z_position","fov_height","d3_transform","k","set","new_size","zoomScaler","point_group","material","uniforms","size","camera_z_start","img_embeddings","vFOV","xs","min_x","_","max_x","ys","min_y","max_y","max_x_from_center","m","abs","max_y_from_center","far","max","scaleExtent","on","zoomHandler","initial_scale","initial_transform","_this$props2","mnist_embeddings","label_chunks","loader","textures","t","load","flipY","magFilter","embedding","vert","positions","offsets","cluster","filtered","addAttribute","floor","repeat","sprite_image_size","greyTransparency","imageTransparency","clusterActive","vertexShader","fragmentShader","transparent","point_cloud","userData","sprite_index","add","pointsMaterial","_this$props3","txt_embeddings","pointsGeometry","colors","_step","_iterator","_createForOfIteratorHelper","s","done","point","text","setHSL","err","f","opacity","sizeAttenuation","vertexColors","pointsContainer","edges","line","_step2","_this$props4","_iterator2","_this3","_this$props5","fetch","then","response","json","raw_points","_step3","_iterator3","coords","_this$props6","txt","mesh","light","_this$props7","spritey","makeTextSprite","hover_container","offset","frustumCulled","visible","digit_index","full_index","_this$props8","copyVector3sArray","highlight_container","highlights","remove","mouse_position","_this$props9","sidebar_ctx","sortIntersectsByDistanceToRay","intersects","mouse_vector","_ref","_ref2","_slicedToArray","mouseX","mouseY","mouseToThree","raycaster","setFromCamera","params","Points","threshold","intersectObjects","intersect","object","setHoverIndex","highlightPoint","fillRect","drawImage","intersects_text","selectedObject","getObjectByName","name","getElementById","innerHTML","_this4","domElement","shiftKey","_d3$mouse","node","_d3$mouse2","checkIntersects","_this5","_this$props10","_ref3","_ref4","mouseToCoords","_ref5","_ref6","selectionPoints","addEventListener","lasso","clientX","clientY","checkinside","buttons","setFromPoints","polygon","pointsinside","reduce","_this$props11","setClearColor","appendChild","addBlankHighlightPoints","handleMouse","addTextPoints","requestAnimationFrame","render","prevProps","_this$props12","removeChild","_this6","_this$props13","overflow","About","left","top","right","bottom","paddingTop","fontSize","lineHeight","className","textAlign","cursor","textDecoration","maxWidth","margin","Markdown","tb","lr","Layout","ww","wh","sidebar_height","show_about","checkHash","indexOf","setState","window","innerWidth","innerHeight","sidebar_mount","offsetHeight","imageSmoothingEnabled","ctx","history","pushState","location","pathname","hash","removeEventListener","val","clip_img_embeddings","clip_txt_embeddings","algorithm_embedding_keys","_this$state","sidebar_style","main_style","font_size","_objectSpread","scaler","general_style","handleChangeScale","Data","md08_umap_mnist_embeddings","embeddings","scaled_embeddings","scaleEmbeddings","Object","assign","App","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fbeff987.chunk.js","sourcesContent":["import React, { Component,useContext } from 'react'\nimport Slider from '@mui/material/Slider';\n\n//const appcontext = useContext(AppContext);\n\n\nclass Sidebar extends Component {\n\n  \n  componentDidMount() {\n    this.props.setSidebarCanvas(this.side_canvas)\n    this.handleSelectAlgorithm = this.handleSelectAlgorithm.bind(this)\n    this.handleSelectModel = this.handleSelectModel.bind(this)\n    this.handleSelectDataset = this.handleSelectDataset.bind(this)\n    this.handleChangScaleMin = this.handleChangScaleMin.bind(this)\n\n\n  }\n\n  handleSelectAlgorithm(e) {\n    let v = e.target.value\n    this.props.selectAlgorithm(v)\n  }\n\n  handleSelectModel(e) {\n    let v = e.target.value\n    this.props.selectModel(v)\n  }\n  handleSelectDataset(e) {\n    let v = e.target.value\n    this.props.selectDataset(v)\n  }\n\n  handleChangScaleMin(e){\n    let v = e.target.value\n    this.props.selectScaleMin(v)\n    console.log(this.props)\n\n  }\n\n  render() {\n    let {\n      sidebar_orientation,\n      sidebar_image_size,\n      grem,\n      p,\n      hover_index,\n      mnist_labels,\n      color_array,\n      model_options,\n      model_choice,\n      dataset_options,\n      dataset_choice,\n      algorithm_options,\n      algorithm_choice,\n      img_labels,\n      scaleMin\n    } = this.props\n\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'space-between',\n          flexGrow: 1,\n        }}\n      >\n        <div>\n          {' '}\n          <div\n            style={{\n              padding: grem / 2,\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n            }}\n          >\n            <div>Emebedding Model:</div>\n            <select\n              style={{width:100}}\n              onChange={this.handleSelectModel}\n              value={model_options[model_choice]}\n            >\n              {model_options.map((option, index) => (\n                <option key={option} value={option}>\n                  {option}\n                </option>\n              ))}\n            </select>\n          </div>\n\n\n          <div\n            style={{\n              padding: grem / 2,\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n            }}\n          >\n            <div>Dataset:</div>\n            <select\n              style={{width:100}}\n              onChange={this.handleSelectDataset}\n              value={dataset_options[dataset_choice]}\n            >\n              {dataset_options.map((option, index) => (\n                <option key={option} value={option}>\n                  {option}\n                </option>\n              ))}\n            </select>\n          </div>\n\n\n          <div\n            style={{\n              display: 'flex',\n              flexDirection:\n                sidebar_orientation === 'horizontal' ? 'row' : 'column',\n            }}\n          >\n            <div>\n\n              <canvas\n                ref={side_canvas => {\n                  this.side_canvas = side_canvas\n                }}\n                width={sidebar_image_size}\n                height={sidebar_image_size}\n              />\n            </div>\n            \n            <div style={{ flexGrow: 1 }}>\n              <div\n                style={{\n                  background: hover_index\n                    //? `rgb(${color_array[mnist_labels[hover_index]].join(',')})`\n                    ? `rgb(${color_array[Math.round(Math.random()*10)].join(',')})`\n                    : 'transparent',\n                  color: hover_index ? '#000' : '#fff',\n                  padding: p(grem / 4, grem / 2),\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                  transition: 'all 0.1s linear',\n                }}\n              >\n                <div>Label:</div>\n        \n                {hover_index ? <div>{img_labels[hover_index]}</div> : null}\n              </div>\n              <div\n                style={{\n                  padding: p(grem / 4, grem / 2),\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                }}\n              >\n                Image Index:\n                {hover_index ? <div>{hover_index}</div> : null}\n              </div>\n              <hr></hr>\n\n              <div id=\"text\" style={{\n              padding: p(grem / 4, grem / 2),\n              display: 'flex',\n              justifyContent: 'space-between',\n              overflowY: 'scroll',\n              float: 'left',\n              height:'200px',\n            }}></div>\n            </div>\n            <div\n            style={{\n              padding: p(grem / 4, grem / 2),\n             \n              justifyContent: 'space-between',\n            }}\n            >\n              <br /> <br /><br /> <br />\n              <b>Scroll up/down to zoom in/out, hover for more info on datapoints<br /> <br />\n              Image and Text are jointly embedded and visualized using UMAP\n              <br /> <br />\n              Label and index will be used if additional metadata is included.\n              </b></div>\n\n          </div>\n\n          <div id=\"display_settings\">\n          <Slider aria-label=\"Volume\" value={scaleMin} onChange={this.handleChangScaleMin} />\n\n          </div>\n          \n        </div>\n        <div style={{ padding: grem / 2 }}>\n          <div>\n            A WIP Multimodal embedding viewer.{' '}\n            <button\n              onClick={() => {\n                this.props.toggleAbout(true)\n              }}\n            >\n              About\n            </button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Sidebar\n","import React, { Component } from 'react'\nimport * as THREE from 'three'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\nimport * as TWEEN from '@tweenjs/tween.js'\nvar pointInPolygon = require('point-in-polygon');\n//var polygon = [ [ 1, 1 ], [ 1, 2 ], [ 2, 2 ], [ 2, 1 ] ];\n\n//console.log(pointInPolygon([ 1.5, 1.5 ], polygon)); // true\n//console.log(pointInPolygon([ 4.9, 1.2 ], polygon)); // false\n//console.log(pointInPolygon([ 1.8, 1.1 ], polygon)); // true\n\n// Constants for sprite sheets - original\n/*let sprite_side = 73\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 14\nlet sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet mnist_tile_string = 'mnist_tile_solid_'\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n\nlet mnist_images = mnist_tile_locations.map(src => {\n  let img = document.createElement('img')\n  img.src = src\n  return img\n})*/\n/////////////////\n\nlet sprite_side = 16\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 8// 1\nlet sprite_image_size = 4096/16\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 4096\n\n//let mnist_tile_string = 'wiki_tile_''highres_tile_'\nlet mnist_tile_string = 'fairface_tile_'\n\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/sprites/${mnist_tile_string}${i}.png`\n)\nconsole.log(mnist_tile_locations)\nlet mnist_images = mnist_tile_locations.map(src => {\n  let img = document.createElement('img')\n  img.src = src\n  return img\n})\n\nlet zoomScaler_old = input => {\n  let scale1 = d3\n    .scaleLinear()\n    .domain([20, 5])\n    .range([50, 500])\n    .clamp(true)\n  let scale2 = d3\n    .scaleLinear()\n    .domain([2, 0.1])\n    .range([500, 5000])\n  if (input >= 5) {\n    return scale1(input)\n    // return 28\n  } else if (input <= 2) {\n     return scale2(input)\n    //return 28\n  } else {\n    return 28\n  }\n}\n\n\n\n    \nclass Projection extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.init = this.init.bind(this)\n    this.addPoints = this.addPoints.bind(this)\n    this.handleResize = this.handleResize.bind(this)\n    this.setUpCamera = this.setUpCamera.bind(this)\n    this.animate = this.animate.bind(this)\n    this.getScaleFromZ = this.getScaleFromZ.bind(this)\n    this.getZFromScale = this.getZFromScale.bind(this)\n    this.changeEmbeddings = this.changeEmbeddings.bind(this)\n  }\n\n\n  zoomScaler(input,scaleMin,scaleMax ) {\n    let scaleProj = d3\n    .scaleLinear()\n    .domain([20,0])\n    .range([scaleMin, scaleMax])\n    .clamp(true);\n    return scaleProj(input);\n  }\n  \n\n  \n  \n\n    makeTextSprite( message, parameters )\n\n    {\n        if ( parameters === undefined ) parameters = {};\n        var fontface = parameters.hasOwnProperty(\"fontface\") ? parameters[\"fontface\"] : \"Cambria\";\n        var fontsize = parameters.hasOwnProperty(\"fontsize\") ? parameters[\"fontsize\"] : 18;\n        var borderThickness = parameters.hasOwnProperty(\"borderThickness\") ? parameters[\"borderThickness\"] : 4;\n        var borderColor = parameters.hasOwnProperty(\"borderColor\") ?parameters[\"borderColor\"] : { r:0, g:0, b:0, a:1.0 };\n        var backgroundColor = parameters.hasOwnProperty(\"backgroundColor\") ?parameters[\"backgroundColor\"] : { r:255, g:0, b:255, a:1.0 };\n        var textColor = parameters.hasOwnProperty(\"textColor\") ?parameters[\"textColor\"] : { r:0, g:0, b:0, a:1.0 };\n        var pad = 5\n        var canvas = document.createElement('canvas');\n        var context = canvas.getContext('2d');\n        //context.scale(this.getScaleFromZ(this.camera.position.z),this.getScaleFromZ(this.camera.position.z));\n        context.clearRect(0, 0, canvas.width, canvas.height);\n\n        context.font = fontsize + \"px \" + fontface;\n        \n        var metrics = context.measureText( message );\n        var textWidth = metrics.width;\n        //context.canvas.width=metrics.width\n        context.beginPath();\n        context.rect(0, fontsize/2 -pad, borderThickness+textWidth +2*pad, fontsize + borderThickness+2*pad);\n        context.stroke();\n        context.fillStyle   = \"rgba(\" + backgroundColor.r + \",\" + backgroundColor.g + \",\" + backgroundColor.b + \",\" + backgroundColor.a + \")\";\n        context.strokeStyle = \"rgba(\" + borderColor.r + \",\" + borderColor.g + \",\" + borderColor.b + \",\" + borderColor.a + \")\";\n        context.fill()\n        context.stroke()\n        context.fillStyle = \"rgba(\"+textColor.r+\", \"+textColor.g+\", \"+textColor.b+\", 1.0)\";\n        context.fillText( message, borderThickness, fontsize + borderThickness,textWidth);\n\n        var texture = new THREE.Texture(canvas) \n        texture.needsUpdate = true;\n        var spriteMaterial = new THREE.SpriteMaterial( { map: texture, useScreenCoordinates: false } );\n        var sprite = new THREE.Sprite( spriteMaterial );\n        //sprite.scale.set(1 * fontsize, 0.05 * fontsize, 0.75 * fontsize);\n        return sprite;  \n    }\n  changeEmbeddings(prev_choice, new_choice) {\n\n\n    // assumes mnist embeddings has been updated\n    console.log(this.props.model_embedding_keys[new_choice]+'img_embeddings')\n\n    let ranges = []\n    for (let i = 0; i < sprite_number; i++) {\n      let start = i * sprite_size\n      let end = (i + 1) * sprite_size\n      if (i === sprite_number - 1) end = sprite_number * sprite_size\n      ranges.push([start, end])\n    }\n\n    let embedding_chunks = ranges.map(range =>\n      this.props[this.props.model_embedding_keys[new_choice]+'img_embeddings'].slice(\n        range[0],\n        range[1]\n      )\n    )\n\n    for (let c = 0; c < sprite_number; c++) {\n      let echunk = embedding_chunks[c]\n\n      let points = this.scene.children[0].children[c]\n      let numVertices = echunk.length\n      let position = points.geometry.attributes.position.array\n\n      let target = new Float32Array(numVertices * 3)\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 3) {\n        let x = echunk[i][0]\n        let y = echunk[i][1]\n        let z = 0\n        target[index] = x\n        target[index + 1] = y\n        target[index + 2] = z\n      }\n\n\n      let tween = new TWEEN.Tween(position)\n        .to(position, 1000)\n        .easing(TWEEN.Easing.Quadratic.InOut)\n      tween.onUpdate(function() {\n        points.geometry.attributes.position = new THREE.BufferAttribute(\n          position,\n          3\n        )\n\n        \n        points.geometry.attributes.position.needsUpdate = true // required after the first render\n      })\n      tween.start()\n    }\n  \n    let new_txt_embeddings = this.props[this.props.model_embedding_keys[new_choice]+'txt_embeddings']\n    let txt_points = this.scene.children[2].children[0]\n    let numVertices = new_txt_embeddings.length\n    let position = txt_points.geometry.vertices\n    let target = new Float32Array(numVertices * 3)\n    let vertices = []\n\n    for (let i = 0, index = 0; i < new_txt_embeddings.length; i++, index += 3) {\n      target[index] = new_txt_embeddings[i][0]\n      target[index + 1] = new_txt_embeddings[i][1]\n      target[index + 2] = 0.5\n      const vertex = new THREE.Vector3(new_txt_embeddings[i][0], new_txt_embeddings[i][1], 0.5);\n      vertices.push(vertex)\n\n    }\n\n    console.log(position,vertices)\n    let tween = new TWEEN.Tween(position)\n    .to(vertices, 1000)\n    .easing(TWEEN.Easing.Linear.None)\n  tween.onUpdate(function() {\n    txt_points.geometry.vertices = vertices\n    txt_points.geometry.position.needsUpdate = true // required after the first render\n    txt_points.geometry.vertices.needsUpdate = true\n  })\n  tween.start()\n\n  \n  \n  }\n\n  getZFromScale(scale) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\n    let scale_height = this.props.height / scale\n    let camera_z_position = scale_height / (2 * Math.tan(rvFOV / 2))\n    return camera_z_position\n  }\n\n  getScaleFromZ(camera_z_position) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\n    let half_fov_height = Math.tan(rvFOV / 2) * camera_z_position\n    let fov_height = half_fov_height * 2\n    let scale = this.props.height / fov_height\n    return scale\n  }\n\n  \n  handleResize = (width, height) => {\n    this.camera.aspect = width / height\n    this.camera.updateProjectionMatrix()\n    this.renderer.setSize(width, height)\n    let current_scale = this.getScaleFromZ(this.camera.position.z)\n    let d3_x = -(this.camera.position.x * current_scale) + this.props.width / 2\n    let d3_y = this.camera.position.y * current_scale + this.props.height / 2\n    var resize_transform = d3.zoomIdentity\n      .translate(d3_x, d3_y)\n      .scale(current_scale)\n    let view = d3.select(this.mount)\n    this.d3_zoom.transform(view, resize_transform)\n\n  }\n\n  zoomHandler() {\n    let d3_transform = d3.event.transform\n\n    let scale = d3_transform.k\n    let x = -(d3_transform.x - this.props.width / 2) / scale\n    let y = (d3_transform.y - this.props.height / 2) / scale\n    let z = this.getZFromScale(scale)\n    this.camera.position.set(x, y, z)\n\n    // point size scales at end of zoom\n    let new_size = this.zoomScaler(z, this.props.scaleMin,500)\n    let point_group = this.scene.children[0].children\n    for (let c = 0; c < point_group.length; c++) {\n      point_group[c].material.uniforms.size.value = new_size\n    }\n  }\n\n  setUpCamera() {\n    let { width, height, img_embeddings } = this.props\n\n    let aspect = this.camera.aspect\n    let vFOV = this.camera.fov\n    let rvFOV = THREE.Math.degToRad(vFOV)\n\n    let xs = img_embeddings.map(e => e[0])\n    let min_x = _.min(xs)\n    let max_x = _.max(xs)\n    let ys = img_embeddings.map(e => e[1])\n    let min_y = _.min(ys)\n    let max_y = _.max(ys)\n    let data_width = max_x - min_x\n    let data_center_x =  (max_x + min_x)/2\n    let data_height = max_y - min_y\n    let data_center_y =  (max_y + min_y)/2\n    let data_aspect = data_width / data_height\n\n    let max_x_from_center = _.max([min_x, max_x].map(m => Math.abs(m)))\n    let max_y_from_center = _.max([min_y, max_y].map(m => Math.abs(m)))\n\n    let max_center = Math.max(max_x_from_center, max_y_from_center)\n\n    let camera_z_start\n    if (data_aspect > aspect) {\n      //console.log(\"width is limiter\");\n      // camera_z_start = max_x_from_center / Math.tan(rvFOV / 2) / aspect\n    } else {\n       //console.log(\"height is limiter\");\n       //camera_z_start = max_y_from_center / Math.tan(rvFOV / 2)\n    }\n\n    camera_z_start = max_center / Math.tan(rvFOV / 2)\n\n    let far = camera_z_start \n    this.camera.far = far    \n    //this.camera.lookAt(new THREE.Vector3(-10 ,0,0)); // Set look at coordinate like this\n    \n    this.camera.position.set(0,0,camera_z_start*1.1); // Set position like this\n\n\n    // set up zoom\n    this.d3_zoom = d3\n      .zoom()\n      .scaleExtent([this.getScaleFromZ(far - 1), this.getScaleFromZ(0.1)])\n      .on('zoom', this.zoomHandler.bind(this))\n\n    let view = d3.select(this.mount)\n    this.view = view\n    view.call(this.d3_zoom)\n    let initial_scale = this.getScaleFromZ(this.camera.position.z)\n    var initial_transform = d3.zoomIdentity\n      .translate(width / 2, height / 2)\n      .scale(initial_scale)\n    this.d3_zoom.transform(view, initial_transform)\n  }\n\n  addPoints() {\n    let { mnist_embeddings,img_embeddings, mnist_labels, img_labels, color_array } = this.props\n\n    // split embeddings and labels into chunks to match sprites\n    let ranges = []\n    for (let i = 0; i < sprite_number; i++) {\n      let start = i * sprite_size\n      let end = (i + 1) * sprite_size\n      if (i === sprite_number - 1) end = sprite_number * sprite_size\n      ranges.push([start, end])\n    }\n\n    let embedding_chunks = ranges.map(range =>\n      img_embeddings.slice(range[0], range[1])\n    )\n    let label_chunks = ranges.map(range =>\n      mnist_labels.slice(range[0], range[1])\n    )\n\n    // load the textures\n    let loader = new THREE.TextureLoader()\n    this.textures = mnist_tile_locations.map(l => {\n      let t = loader.load(l)\n      t.flipY = false\n      t.magFilter = THREE.NearestFilter\n      // t.minFilter = THREE.LinearMipMapLinearFilter;\n      return t\n    })\n\n    let point_group = new THREE.Group()\n    for (let c = 0; c < sprite_number; c++) {\n      let echunk = embedding_chunks[c]\n      let lchunk = label_chunks[c]\n\n      let vertices = []\n      for (let v = 0; v < echunk.length; v++) {\n        let embedding = echunk[v]\n        let vert = new THREE.Vector3(embedding[0], embedding[1], 0)\n        vertices[v] = vert\n      }\n\n      let geometry = new THREE.BufferGeometry()\n\n      let numVertices = vertices.length\n      let positions = new Float32Array(numVertices * 3)\n      let offsets = new Float32Array(numVertices * 2)\n      let cluster = new Float32Array(numVertices * 3)\n      let filtered = new Float32Array(numVertices );\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\n      geometry.addAttribute('offset', new THREE.BufferAttribute(offsets, 2))\n      geometry.addAttribute('filter', new THREE.BufferAttribute(filtered, 1));\n      geometry.addAttribute('cluster', new THREE.BufferAttribute(cluster, 3));\n\n\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 3) {\n        let x = echunk[i][0]\n        let y = echunk[i][1]\n        let z = 0\n        positions[index] = x\n        positions[index + 1] = y\n        positions[index + 2] = z\n      }\n\n      // geometry.attributes.position.copyVector3sArray(vertices)\n\n      let texture_subsize = 1 / sprite_side\n\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 2) {\n        let x = ((i % sprite_side) * sprite_image_size) / sprite_actual_size\n        let y =\n          (Math.floor(i / sprite_side) * sprite_image_size) / sprite_actual_size\n        offsets[index] = x\n        offsets[index + 1] = y\n      }\n\n  \n        // Todo: connect cluster the array\n        //let clusterSelected = this.props.clusterTypeSelected;\n       // let clusterColors = this.props.settings.clusters.clusterColors;\n        // console.log(\"clusterSelected\",clusterSelected)\n        for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 1) {\n          // Images disable when are not visible\n          filtered[index] = 0.0;// default value to show all images\n\n          // Clusters visualization\n          let clusterSelected = 1\n          let clusterColors = [1,2,3,1,2,3]\n          if( clusterSelected !== \"-\" ){ \n              let clusterId = 2;\n              if(clusterId >= clusterColors.length){\n                cluster[index*3] = 1.0;\n                cluster[index*3 + 1] = 1.0;\n                cluster[index*3 + 2] = 1.0;\n              }else{\n                cluster[index*3] = 0;\n                cluster[index*3 + 1] = 1;\n                cluster[index*3 + 2] = 0;\n              }\n          }\n      }\n    \n      // uniforms\n      let uniforms = {\n        texture: { value: this.textures[c] },\n        repeat: { value: new THREE.Vector2(texture_subsize, texture_subsize) },\n        size: { value: this.sprite_image_size },\n        greyTransparency:{ value:1},\n        imageTransparency:{ value:0},\n        clusterActive:{ value:0.0}\n      };\n\n      let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        attribute vec3 cluster;\n        varying vec3 vCluster;\n        attribute float filteredActive;\n        varying float vFilteredActive;\n        uniform float clusterActive;\n        varying float vClusterActive;\n        uniform float size;\n        uniform float greyTransparency;\n        varying float vGreyTransparency;\n        uniform float imageTransparency;\n        varying float vImageTransparency;\n\n        void main() {\n          vOffset = offset;\n          vFilteredActive = filteredActive;\n          vCluster = cluster;\n          vClusterActive = clusterActive;\n          vGreyTransparency = greyTransparency;\n          vImageTransparency = imageTransparency;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`;\n\n      let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        varying vec3 vCluster;\n        varying float vClusterActive;\n        varying float vFilteredActive;\n        varying float vGreyTransparency;\n        varying float vImageTransparency;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\n          // make transparent images\n          if ( tex.a < 0.003 ) discard;\n\n          // Display clusters\n          vec4 replace_color = vec4(vCluster,1.0);\n          vec4 default_border_color = vec4(0.00392156863,0.00392156863,0.00392156863,0.0);\n          vec4 diff = tex - default_border_color;\n          float equality = float(dot(diff,diff) < 0.99 && vClusterActive > 0.9);\n          tex = mix( tex, replace_color, equality);\n           \n          // make transparent images\n          tex = mix( tex,  vec4(0.0,0.0,0.0,0.0), vImageTransparency);\n\n          // Grey images filter our selection \n          vec4 filterout_color = vec4(0.3,0.3,0.3,vGreyTransparency);\n          float filterout_equality = float(vFilteredActive > 0.9);\n          tex = mix( tex, filterout_color, filterout_equality );\n          gl_FragColor = tex; //* vec4(vColor, 1.0);\n        }`;\n      // material\n      let material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: vertex_shader,\n        fragmentShader: fragment_shader,\n        transparent: true\n      });\n\n      // point cloud\n      let point_cloud = new THREE.Points(geometry, material)\n      point_cloud.userData = { sprite_index: c }\n\n      point_group.add(point_cloud)\n\n\n      \n    }\n\n    this.scene.add(point_group)\n\n\n\n  }\n\n\n  addTextPoints() {\n    let { txt_embeddings, mnist_labels, img_labels, color_array } = this.props\n    let pointsMaterial;\n    \n\n        const pointsGeometry = new THREE.Geometry();\n        const colors = [];\n        let numVertices = txt_embeddings.length\n        let positions = new Float32Array(numVertices * 3)\n\n        for (let i = 0, index = 0; i < txt_embeddings.length; i++, index += 3) {\n          positions[index] = txt_embeddings[i][0]\n          positions[index + 1] = txt_embeddings[i][1]\n          positions[index + 2] = 0.5\n        }\n\n        pointsGeometry.position = positions\n        for (const point of txt_embeddings) {\n          const vertex = new THREE.Vector3(point[0], point[1], 0.5);\n          vertex.userData = { text: \"heyyyy\" }\n          pointsGeometry.vertices.push(vertex);\n          const color = new THREE.Color();\n          color.setHSL(0., 0.65, 0.5);\n          colors.push(color);\n          \n        \n      }\n        pointsGeometry.colors = colors;\n        pointsMaterial = new THREE.PointsMaterial({\n          // map: spriteMap,\n          size: 10,\n          opacity: 0.9,\n           transparent: true,\n          // blending: THREE.AdditiveBlending,\n          sizeAttenuation: false,\n          vertexColors: THREE.VertexColors,\n        });\n        const points = new THREE.Points(pointsGeometry, pointsMaterial);\n        this.pointsContainer = new THREE.Object3D();\n        this.pointsContainer.add(points);\n        this.scene.add(this.pointsContainer);\n        const edges = new THREE.EdgesGeometry( pointsGeometry ); \n        const line = new THREE.LineSegments(edges, new THREE.LineBasicMaterial( { color: 0xffffff } ) ); \n        this.scene.add(line);\n      \n    }\n  \n  addImgPoints() {\n      let { img_embeddings, mnist_labels, img_labels, color_array } = this.props\n      let pointsMaterial;\n      \n  \n          const pointsGeometry = new THREE.Geometry();\n          const colors = [];\n  \n          for (const point of img_embeddings) {\n            const vertex = new THREE.Vector3(point[0], point[1], 0.5);\n            pointsGeometry.vertices.push(vertex);\n            const color = new THREE.Color();\n            color.setHSL(0.6, 1.0, 0.5);\n            colors.push(color);\n          \n        }\n          pointsGeometry.colors = colors;\n          pointsMaterial = new THREE.PointsMaterial({\n            // map: spriteMap,\n            size: 5,\n            // transparent: true,\n            // blending: THREE.AdditiveBlending,\n            sizeAttenuation: false,\n            vertexColors: THREE.VertexColors,\n          });\n          const points = new THREE.Points(pointsGeometry, pointsMaterial);\n          const pointsContainer = new THREE.Object3D();\n          pointsContainer.add(points);\n          this.scene.add(pointsContainer);\n        \n      }\n\n  addTextPointsold() {\n    let { mnist_embeddings,img_embeddings, mnist_labels, img_labels, color_array } = this.props\n    let pointsMaterial;\n\n    fetch('//fastforwardlabs.github.io/visualization_assets/word2vec_tsne_2d.json')\n      .then(response => response.json())\n      .then(raw_points => {\n        const pointsGeometry = new THREE.Geometry();\n        const colors = [];\n        for (const point of raw_points) {\n          const vertex = new THREE.Vector3(point.coords[0], point.coords[1], 0);\n          pointsGeometry.vertices.push(vertex);\n          const color = new THREE.Color();\n          color.setHSL(Math.random(), 1.0, 0.5);\n          colors.push(color);\n        }\n        pointsGeometry.colors = colors;\n        pointsMaterial = new THREE.PointsMaterial({\n          // map: spriteMap,\n          size: 2,\n          // transparent: true,\n          // blending: THREE.AdditiveBlending,\n          sizeAttenuation: false,\n          vertexColors: THREE.VertexColors,\n        });\n        const points = new THREE.Points(pointsGeometry, pointsMaterial);\n        const pointsContainer = new THREE.Object3D();\n        pointsContainer.add(points);\n        this.scene.add(pointsContainer);\n      });\n\n  }\n\n  addTextPoints2() {\n    let { txt_embeddings, mnist_labels, txt, color_array } = this.props\n\n      // Create a texture loader so we can load our image file\n      var loader = new THREE.TextureLoader();\n\n      // Load an image file into a custom material\n      var material = new THREE.MeshLambertMaterial({\n        //map: loader.load('https://s3.amazonaws.com/duhaime/blog/tsne-webgl/assets/cat.jpg')\n        map: loader.load('https://upload.wikimedia.org/wikipedia/commons/thumb/9/92/Location_dot_red.svg/1200px-Location_dot_red.svg.png')\n      });\n\n      // create a plane geometry for the image with a width of 10\n      // and a height that preserves the image's aspect ratio\n      var geometry = new THREE.PlaneGeometry(1, 1);\n\n      // combine our image geometry and material into a mesh\n      var mesh = new THREE.Mesh(geometry, material);\n\n      // set the position of the image mesh in the x,y,z dimensions\n      mesh.position.set(0,0,0)\n\n      // add the image to the scene\n      this.scene.add(mesh);\n\n      /**\n      * Lights\n      **/\n\n      // Add a point light with #fff color, .7 intensity, and 0 distance\n      var light = new THREE.PointLight( 0xffffff, 1, 0 );\n\n      // Specify the light's position\n      light.position.set(1, 1, 100 );\n\n      // Add the light to the scene\n      this.scene.add(light)\n\n  }\n\n\n\n  addtexts(){\n    let { txt, txt_embeddings } = this.props\n\n    for (let c = 0; c < txt_embeddings.length; c++){\n        var spritey = this.makeTextSprite( txt[c], \n\t\t{ fontsize: 18, textColor: {r:0, g:0, b:0, a:0.8}} );\n        spritey.position.set(txt_embeddings[c][0],txt_embeddings[c][1],0.5);\n        this.scene.add( spritey );\n    }\n\n  }\n\n\n  addBlankHighlightPoints() {\n    let hover_container = new THREE.Group();\n    this.scene.add(hover_container);\n\n    let vert = new THREE.Vector3(0, 0, 0);\n    let vertices = [vert];\n    let geometry = new THREE.BufferGeometry();\n    let numVertices = vertices.length;\n    var position = new Float32Array(numVertices * 3); // 3 coordinates per point\n    var offset = new Float32Array(numVertices * 2); // 2 coordinates per point\n    geometry.addAttribute('position', new THREE.BufferAttribute(position, 3));\n    geometry.addAttribute('offset', new THREE.BufferAttribute(offset, 2));\n\n    // all the attributes will be filled on hover\n    let texture_subsize = 1 / sprite_side;\n\n    // uniforms\n    let uniforms = {\n      texture: { value: this.textures[0] },\n      repeat: { value: new THREE.Vector2(texture_subsize, texture_subsize) },\n      size: { value: 200.0 }, //56\n    };\n\n    let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`;\n\n    let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\n          gl_FragColor = tex;\n        }`;\n\n    // material\n    var material = new THREE.ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: vertex_shader,\n      fragmentShader: fragment_shader,\n      transparent: true,\n    });\n\n    let point = new THREE.Points(geometry, material);\n    point.frustumCulled = false;\n\n    this.scene.children[1].visible = false;\n    this.scene.children[1].add(point);\n  }\n  highlightPoint(sprite_index, digit_index, full_index) {\n    let { model_embedding_keys, model_choice,img_embeddings } = this.props\n\n    let point = this.scene.children[1].children[0]\n\n    //let embedding = this.props[model_embedding_keys[model_choice]+'img_embeddings'][\n     // full_index\n    //]\n\n\n    let embedding = img_embeddings[\n      full_index\n    ]\n\n\n    let vert = new THREE.Vector3(embedding[0], embedding[1], 0)\n    let vertices = [vert]\n\n    var offsets = new Float32Array(2) // 2 coordinates per point\n\n    let x = ((digit_index % sprite_side) * sprite_image_size) / sprite_actual_size \n    let y = (Math.floor(digit_index / sprite_side) * sprite_image_size) / sprite_actual_size \n    offsets[0] = x\n    offsets[1] = y\n\n    point.geometry.attributes.position.copyVector3sArray(vertices)\n    point.geometry.attributes.position.needsUpdate = true // required after the first render\n    point.geometry.attributes.offset.array = offsets\n    point.geometry.attributes.offset.needsUpdate = true // required after the first render\n\n    // need to set attributes on geometry and uniforms on material\n    point.material.uniforms.texture.value = this.textures[sprite_index]\n  }\n\n  removeHighlights() {\n    let highlight_container = this.scene.children[1]\n    let highlights = highlight_container.children\n    highlight_container.remove(...highlights)\n  }\n\n  checkIntersects(mouse_position) {\n\n    let { width, height, sidebar_ctx, sidebar_image_size, txt, txt_embeddings } = this.props\n\n    function mouseToThree([mouseX, mouseY]) {\n      return new THREE.Vector3(\n        (mouseX / width) * 2 - 1,\n        -(mouseY / height) * 2 + 1,\n        1\n      )\n    }\n\n\n    this.getScaleFromZ(this.camera.position.z)\n\n    function sortIntersectsByDistanceToRay(intersects) {\n      return _.sortBy(intersects, 'distanceToRay')\n    }\n\n    let mouse_vector = mouseToThree(mouse_position)\n    this.raycaster.setFromCamera(mouse_vector, this.camera)\n    this.raycaster.params.Points.threshold = 0.25\n    let intersects = this.raycaster.intersectObjects(\n      this.scene.children[0].children\n    )\n\n    \n   //console.log(this.scene.children)\n    if (intersects[0]) {\n      console.log(\"hovered over image\")\n      let sorted_intersects = sortIntersectsByDistanceToRay(intersects)\n      let intersect = sorted_intersects[0]\n      let sprite_index = intersect.object.userData.sprite_index\n      let digit_index = intersect.index\n      let full_index = sprite_index * sprite_size + digit_index\n      this.props.setHoverIndex(full_index)\n      this.highlightPoint(sprite_index, digit_index, full_index)\n      this.scene.children[1].visible = true\n\n      sidebar_ctx.fillRect(0, 0, sidebar_image_size, sidebar_image_size)\n      sidebar_ctx.drawImage(\n        mnist_images[sprite_index],\n        // source rectangle\n        (digit_index % sprite_side) * sprite_image_size,\n        Math.floor(digit_index / sprite_side) * sprite_image_size,\n        sprite_image_size,\n        sprite_image_size,\n        // destination rectangle\n        0,\n        0,\n        sidebar_image_size,\n        sidebar_image_size\n      )\n    } else {\n      this.props.setHoverIndex(null)\n      this.scene.children[1].visible = false\n      sidebar_ctx.fillRect(0, 0, sidebar_image_size, sidebar_image_size)\n      //var div = document.getElementById('text');\n      //div.innerHTML = \"\";\n    }\n\n    let intersects_text = this.raycaster.intersectObjects(\n      this.scene.children[2].children\n    )\n    if (intersects_text[0]) {\n      console.log(\"hello\")\n      let sorted_intersects = sortIntersectsByDistanceToRay(intersects_text)\n      let intersect = sorted_intersects[0]\n      let text_index = intersect.object.userData\n      //this.pointsContainer.children[0].geometry.colors[intersect.index] = {r: 1, g: 0, b: 0}\n      this.pointsContainer.children[0].geometry.colors[intersect.index].r = 1\n      //console.log(intersect, txt[intersect.index],this.pointsContainer.children[0].geometry.colors[intersect.index].r)\n      \n      var selectedObject = this.scene.getObjectByName(\"tooltip\");\n      console.log(this.getScaleFromZ(this.camera.position.z))\n      this.scene.remove( selectedObject )\n      var mul = 120\n      //if (selectedObject === undefined){\n        var spritey = this.makeTextSprite( txt[intersect.index].slice(0, 30)+\"...\", \n          { fontsize: 18, textColor: {r:0, g:0, b:0, a:1},borderColor: {r:0, g:0, b:0, a:1},backgroundColor: {r:255, g:255, b:255, a:1}} );\n              spritey.position.set(txt_embeddings[intersect.index][0]+0.5,txt_embeddings[intersect.index][1]-0.5,0.5);\n              spritey.name = \"tooltip\"\n              spritey.scale.x=2/this.getScaleFromZ(this.camera.position.z)*mul\n              spritey.scale.y=1/this.getScaleFromZ(this.camera.position.z)*mul\n      \n              this.scene.add( spritey );  \n      //}\n     \n      console.log(this.scene.children[0])\n      var div = document.getElementById('text');\n\n      div.innerHTML = txt[intersect.index];\n    } else {\n      var selectedObject = this.scene.getObjectByName(\"tooltip\");\n      this.props.setHoverIndex(null)\n      this.scene.remove( selectedObject )\n      }\n  }\n\n  handleMouse() {\n    let view = d3.select(this.renderer.domElement)\n\n    this.raycaster = new THREE.Raycaster()\n\n    view.on('mousemove', () => {\n    if(!d3.event.shiftKey){\n        let [mouseX, mouseY] = d3.mouse(view.node())\n        let mouse_position = [mouseX, mouseY]\n        this.checkIntersects(mouse_position)\n    }})\n  }\n\n  handlelasso(){\n\n    let { width, height, sidebar_ctx, sidebar_image_size } = this.props\n\n    function mouseToThree([mouseX, mouseY],scale) {\n      return new THREE.Vector3(\n        scale*(( mouseX /width ) * 2 - 1.5),\n        -scale*((mouseY / height) * 2 - 1),\n        1\n      )\n    }\n\n    function mouseToCoords([mouseX, mouseY],scale) {\n        return [\n          scale*(( mouseX /width ) * 2 - 1.5),\n          -scale*((mouseY / height) * 2 - 1),\n        ]\n      }\n\n\n\n    this.selectionPoints = [];\n    const material = new THREE.LineBasicMaterial( { color: 0x0000ff } );\n            \n\n\n\n\tthis.renderer.domElement.addEventListener( 'pointerdown', e => {\n        this.lasso = [];\n\t\tthis.selectionPoints.length = 0;\n        this.points = []\n        this.points.push( mouseToCoords([e.clientX, e.clientY ],this.getScaleFromZ(this.camera.position.z)) );\n        this.lasso.push( mouseToThree([e.clientX, e.clientY ],this.getScaleFromZ(this.camera.position.z)) );\n\n        \n\t} );\n\n\tthis.renderer.domElement.addEventListener( 'pointerup', () => {\n        console.log(this.points)\n        let { img_embeddings } = this.props\n        this.checkinside(img_embeddings, this.points)\n        \n        \n    })\n\n    this.renderer.domElement.addEventListener( 'pointermove', e => {\n\n\t\t// If the left mouse button is not pressed\n\t\tif ( ( 1 & e.buttons ) === 0 ) {\n\n\t\t\treturn;\n\n\t\t}\n        this.points.push(mouseToCoords([e.clientX, e.clientY ],this.getScaleFromZ(this.camera.position.z)));    \n        this.lasso.push(mouseToThree([e.clientX, e.clientY ],this.getScaleFromZ(this.camera.position.z)));    \n\n        const geometry = new THREE.BufferGeometry().setFromPoints( this.lasso );\n\n        const line = new THREE.Line( geometry, material );\n        this.scene.add( line );\n    \n    } );\n\n  }\n\n  checkinside(points, polygon){\n    var pointsinside = points.map(point => {\n        return pointInPolygon(point, polygon);\n    });\n    const arrsum = arr => arr.reduce((a,b) => a*1.0 + b*1.0, 0)\n    console.log(arrsum(pointsinside))\n\n    \n\n\n  }\n\n\n  init() {\n    let { width, height } = this.props\n\n    this.scene = new THREE.Scene()\n    this.scene.background = new THREE.Color( '#ffffff' );\n\n\n    let vFOV = 15\n    let aspect = width / height\n    let near = 0.02\n    let far = 1000\n\n    this.camera = new THREE.PerspectiveCamera(vFOV, aspect, near, far)\n    this.renderer = new THREE.WebGLRenderer()\n    this.renderer.setClearColor(0x111111, 1)\n    this.renderer.setSize(width, height)\n    this.mount.appendChild(this.renderer.domElement)\n\n    this.addPoints()\n\n    this.addBlankHighlightPoints()\n\n    this.setUpCamera()\n\n    this.animate()\n\n    this.handleMouse()\n\n    //this.addtexts()\n    this.addTextPoints()\n    //this.addImgPoints()\n    //this.handlelasso()\n\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate)\n    TWEEN.update()\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  componentDidMount() {\n    this.init()\n  }\n\n  componentDidUpdate(prevProps) {\n\n    let { width, height } = this.props\n    if (width !== prevProps.width || height !== prevProps.height) {\n      this.handleResize(width, height)\n    }\n    if (prevProps.model_choice !== this.props.model_choice) {\n      this.changeEmbeddings(\n        prevProps.model_choice,\n        this.props.model_choice\n      )\n    }\n  }\n\n  componentWillUnmount() {\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\n  render() {\n    let { width, height } = this.props\n    return (\n      <div\n        style={{ width: width, height: height, overflow: 'hidden' }}\n        ref={mount => {\n          this.mount = mount\n        }}\n      />\n    )\n  }\n}\n\nexport default Projection\n","import React, { Component } from 'react'\nimport Markdown from 'react-remarkable'\nimport { about_text } from './Content'\n\nclass About extends Component {\n  render() {\n    let { grem, p } = this.props\n    return (\n      <div\n        style={{\n          position: 'fixed',\n          left: 0,\n          top: 0,\n          right: 0,\n          bottom: 0,\n          background: '#222',\n          color: '#fff',\n          paddingTop: grem * 2,\n          overflowY: 'auto',\n          fontSize: 16,\n          lineHeight: 1.5,\n        }}\n      >\n        <div\n          style={{\n            background: '#333',\n            position: 'fixed',\n            left: 0,\n            top: 0,\n            right: 0,\n            padding: grem / 2,\n          }}\n        >\n          About\n          <button\n            onClick={() => {\n              this.props.toggleAbout(false)\n            }}\n            className=\"hover-555\"\n            style={{\n              position: 'absolute',\n              right: 0,\n              top: 0,\n              height: grem * 2,\n              width: grem * 2,\n              padding: grem / 2,\n              textAlign: 'center',\n              cursor: 'pointer',\n              textDecoration: 'none',\n            }}\n          >\n            &times;\n          </button>\n        </div>\n        <div\n          style={{\n            maxWidth: grem * 30,\n            margin: '0 auto',\n            padding: grem / 2,\n            color: '#fff',\n          }}\n        >\n          <Markdown>{about_text}</Markdown>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default About\n","export let about_text = `\n# About EmbedAnything\nThis is an interactive visualization that embeds, clusters and analyses multimodal data.`\n","import React, { Component } from 'react'\nimport Sidebar from './Sidebar'\nimport Projection from './Projection'\nimport About from './About'\nimport * as _ from 'lodash'\n\n// padding constructor\nfunction p(tb, lr) {\n  return `${tb}px ${lr}px`\n}\n\nlet color_array = [\n  [141, 211, 199],\n  [255, 255, 179],\n  [190, 186, 218],\n  [251, 128, 114],\n  [128, 177, 211],\n  [253, 180, 98],\n  [179, 222, 105],\n  [252, 205, 229],\n  [188, 128, 189],\n  [141, 211, 199],\n  [255, 255, 179],\n  [190, 186, 218],\n  [251, 128, 114],\n  [128, 177, 211],\n  [253, 180, 98],\n  [179, 222, 105],\n  [252, 205, 229],\n  [188, 128, 189],\n  [141, 211, 199],\n  [255, 255, 179],\n  [190, 186, 218],\n  [251, 128, 114],\n  [128, 177, 211],\n  [253, 180, 98],\n  [179, 222, 105],\n  [252, 205, 229],\n  [188, 128, 189],\n  [141, 211, 199],\n  [255, 255, 179],\n  [190, 186, 218],\n  [251, 128, 114],\n  [128, 177, 211],\n  [253, 180, 98],\n  [179, 222, 105],\n  [252, 205, 229],\n  [188, 128, 189],\n  [141, 211, 199],\n  [255, 255, 179],\n  [190, 186, 218],\n  [251, 128, 114],\n  [128, 177, 211],\n  [253, 180, 98],\n  [179, 222, 105],\n  [252, 205, 229],\n  [188, 128, 189],\n  [141, 211, 199],\n  [255, 255, 179],\n  [190, 186, 218],\n  [251, 128, 114],\n  [128, 177, 211],\n  [253, 180, 98],\n  [179, 222, 105],\n  [252, 205, 229],\n  [188, 128, 189],\n  [141, 211, 199],\n  [255, 255, 179],\n  [190, 186, 218],\n  [251, 128, 114],\n  [128, 177, 211],\n  [253, 180, 98],\n  [179, 222, 105],\n  [252, 205, 229],\n  [188, 128, 189],\n]\n\nclass Layout extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ww: null,\n      wh: null,\n      sidebar_height: null,\n      hover_index: null,\n      show_about: null,\n      algorithm_choice: 0,\n      model_choice:0,\n      dataset_choice:0,\n      scaleMin:60,\n    }\n    this.sidebar_ctx = null\n    this.setSize = _.debounce(this.setSize.bind(this), 200)\n    this.checkHash = this.checkHash.bind(this)\n    this.setSidebarCanvas = this.setSidebarCanvas.bind(this)\n    this.toggleAbout = this.toggleAbout.bind(this)\n    this.selectAlgorithm = this.selectAlgorithm.bind(this)\n    this.selectModel = this.selectModel.bind(this)\n    this.selectDataset = this.selectDataset.bind(this)\n    this.selectScaleMin = this.selectScaleMin.bind(this)\n  }\n\n  selectAlgorithm(v) {\n    let i = this.props.algorithm_options.indexOf(v)\n    this.setState({ algorithm_choice: i })\n  }\n\n  selectModel(v) {\n    let i = this.props.model_options.indexOf(v)\n    this.setState({ model_choice: i })\n  }\n\n  selectDataset(v) {\n    let i = this.props.dataset_options.indexOf(v)\n    console.log(this.props.dataset_options)\n    this.setState({ dataset_choice: i })\n  }\n\n\n\n  selectScaleMin(v) {\n    console.log(v)\n    this.setState({ scaleMin: v })\n  }\n\n\n  setSize() {\n    this.setState({ ww: window.innerWidth, wh: window.innerHeight })\n    let sidebar_height = this.sidebar_mount.offsetHeight\n    this.setState({ sidebar_height: sidebar_height })\n    if (this.sidebar_ctx) this.sidebar_ctx.imageSmoothingEnabled = false\n  }\n\n  setSidebarCanvas(canvas) {\n    let ctx = canvas.getContext('2d')\n    ctx.imageSmoothingEnabled = false\n    this.sidebar_ctx = ctx\n  }\n\n  toggleAbout(state) {\n    if (state === true) {\n      window.history.pushState(null, 'About UMAP Explorer', '#about')\n      this.setState({ show_about: true })\n    } else if (state === false) {\n      window.history.pushState(null, 'UMAP Explorer', window.location.pathname)\n      this.setState({ show_about: false })\n    }\n  }\n\n  setHoverIndex(hover_index) {\n    this.setState({ hover_index: hover_index })\n  }\n\n  componentWillMount() {\n    this.setSize()\n    this.checkHash()\n  }\n\n  checkHash() {\n    if (window.location.hash && window.location.hash === '#about') {\n      this.setState({ show_about: true })\n    } else {\n      this.setState({ show_about: false })\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.setSize)\n    window.addEventListener('popstate', this.checkHash)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setSize)\n  }\n\n  handleChangeScale(e,val) {\n    this.setState({ scaleMin: val})\n    console.log(val)\n  }\n\n  ////////\n  render() {\n    let {\n      mnist_embeddings,\n      txt,\n      txt_embeddings,\n      img_embeddings,\n      clip_img_embeddings,\n      clip_txt_embeddings,\n      mnist_labels,\n      algorithm_options,\n      model_options,\n      dataset_options,\n      algorithm_embedding_keys,\n      model_embedding_keys,\n      img_labels,\n      \n      scaleMax,\n    } = this.props\n    let {\n      ww,\n      wh,\n      sidebar_height,\n      hover_index,\n      show_about,\n      model_choice,\n      algorithm_choice,\n      dataset_choice,\n      scaleMin,\n    } = this.state\n    let sidebar_ctx = this.sidebar_ctx\n\n    let line_height = 1.5\n\n    let sidebar_style = {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      height: '100vh',\n      overflow: 'auto',\n      background: '#222',\n      display: 'flex',\n      flexDirection: 'column',\n    }\n    let main_style = {\n      position: 'relative',\n      height: '100vh',\n      background: '#111',\n      overflow: 'hidden',\n    }\n\n    let sidebar_image_size, sidebar_orientation\n    let font_size = 16\n    if (ww < 800) {\n      font_size = 14\n      sidebar_style = {\n        ...sidebar_style,\n        flexDirection: 'row',\n        width: '100%',\n        top: 'auto',\n        height: 'auto',\n        bottom: 0,\n      }\n      main_style = { width: ww, height: wh - sidebar_height }\n      sidebar_image_size = font_size * line_height * 3\n      sidebar_orientation = 'horizontal'\n    } else if (ww < 800 + 600) {\n      let scaler = 200 + (300 - 200) * ((ww - 800) / 600)\n      font_size = 14 + 2 * ((ww - 800) / 600)\n      sidebar_style = {\n        ...sidebar_style,\n        width: scaler,\n      }\n      sidebar_image_size = sidebar_style.width\n      main_style = {\n        ...main_style,\n        width: ww - scaler,\n        left: scaler,\n        height: wh,\n      }\n      sidebar_orientation = 'vertical'\n    } else {\n      sidebar_style = {\n        ...sidebar_style,\n        width: 300,\n      }\n      main_style = {\n        ...main_style,\n        width: ww - 300,\n        left: 300,\n        height: wh,\n      }\n      sidebar_image_size = sidebar_style.width\n      sidebar_orientation = 'vertical'\n    }\n\n    let grem = font_size * line_height\n\n    let general_style = {\n      fontSize: font_size,\n      lineHeight: line_height,\n    }\n\n    return ww !== null ? (\n      <div style={general_style}>\n        <div\n          style={sidebar_style}\n          ref={sidebar_mount => {\n            this.sidebar_mount = sidebar_mount\n          }}\n        >\n          <Sidebar\n            sidebar_orientation={sidebar_orientation}\n            sidebar_image_size={sidebar_image_size}\n            grem={grem}\n            p={p}\n            color_array={color_array}\n            setSidebarCanvas={this.setSidebarCanvas}\n            hover_index={hover_index}\n            mnist_labels={mnist_labels}\n            txt={txt}\n            toggleAbout={this.toggleAbout}\n            algorithm_options={algorithm_options}\n            algorithm_choice={algorithm_choice}\n            selectAlgorithm={this.selectAlgorithm}\n            model_options={model_options}\n            model_choice={model_choice}\n            selectModel={this.selectModel}\n            dataset_options={dataset_options}\n            dataset_choice={dataset_choice}\n            selectDataset={this.selectDataset}\n            selectScaleMin={this.selectScaleMin}\n            img_labels={img_labels}\n            scaleMin = {scaleMin}\n            scaleMax = {scaleMax}\n            handleChangeScale = {this.handleChangeScale}\n          />\n        </div>\n        <div style={main_style}>\n          <Projection\n            width={main_style.width}\n            height={main_style.height}\n            mnist_embeddings={mnist_embeddings}\n            txt={txt}\n            txt_embeddings={txt_embeddings} \n            img_embeddings={img_embeddings} \n            clip_img_embeddings={clip_img_embeddings}\n            clip_txt_embeddings={clip_txt_embeddings}\n            mnist_labels={mnist_labels}\n            color_array={color_array}\n            sidebar_ctx={sidebar_ctx}\n            sidebar_image_size={sidebar_image_size}\n            setHoverIndex={this.setHoverIndex.bind(this)}\n            algorithm_embedding_keys={algorithm_embedding_keys}\n            algorithm_choice={algorithm_choice}\n            model_embedding_keys={model_embedding_keys}\n            model_choice={model_choice}\n            scaleMin = {scaleMin}\n            scaleMax = {500}\n          />\n        </div>\n\n\n        \n        {show_about ? (\n          <About grem={grem} p={p} toggleAbout={this.toggleAbout} />\n        ) : null}\n      </div>\n    ) : (\n      <div style={{ padding: '1rem' }}>Loading projections...</div>\n    )\n  }\n}\n\nexport default Layout\n","import React, { Component } from 'react'\nimport Layout from './Layout'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\n\n\nlet algorithm_options = ['UMAP',]\nlet algorithm_embedding_keys = [\n  'mnist_embeddings',\n]\n\n\n\nvar dataset_name = 'fairface_'//'wiki_'//'visiogen_'\nvar model_name = 'ib_'//'ib_' 'clip_'\n\n\nlet model_options = [dataset_name]//['Imagebind', 'CLIP']\nlet model_embedding_keys = [\n  '',\n  'clip_',\n]\n\nlet dataset_options = [model_name]//['Visiogender',\"Wiki\"]\n\n\nclass Data extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      mnist_embeddings: null,\n      mnist_labels: null,\n      md08_umap_mnist_embeddings: null,\n      txt_embeddings: null,\n\n    }\n  }\n\n  scaleEmbeddings(embeddings) {\n    let xs = embeddings.map(e => Math.abs(e[0]))\n    let ys = embeddings.map(e => Math.abs(e[1]))\n    let max_x = _.max(xs)\n    let max_y = _.max(ys)\n    let max = Math.max(max_x, max_y)\n    let scale = d3\n      .scaleLinear()\n      .domain([-max, max])\n      .range([-20, 20])\n    let scaled_embeddings = embeddings.map(e => [scale(e[0]), scale(e[1])])\n    return scaled_embeddings\n  }\n\n  componentDidMount() {\n    fetch(`${process.env.PUBLIC_URL}/mnist_embeddings.json`)\n      .then(response => response.json())\n      .then(mnist_embeddings => {\n        let scaled_embeddings = this.scaleEmbeddings(mnist_embeddings)\n        this.setState({\n          mnist_embeddings: scaled_embeddings,\n        })\n        \n      })\n\n    fetch(`${process.env.PUBLIC_URL}/mnist_labels.json`)\n      .then(response => response.json())\n      .then(mnist_labels =>\n        this.setState({\n          mnist_labels: mnist_labels,\n        })\n      )\n\n      fetch(`${process.env.PUBLIC_URL}/data/`+dataset_name+model_name+`txt_embeddings.json`)\n      .then(response => response.json())\n      .then(txt_embeddings => {\n        let scaled_embeddings = this.scaleEmbeddings(txt_embeddings)\n        this.setState({\n          txt_embeddings: scaled_embeddings,\n        })\n      })\n\n\n      fetch(`${process.env.PUBLIC_URL}/data/`+dataset_name+model_name+`img_embeddings.json`)\n      .then(response => response.json())\n      .then(img_embeddings => {\n        console.log(img_embeddings)\n        let scaled_embeddings = this.scaleEmbeddings(img_embeddings)\n        this.setState({\n          img_embeddings: scaled_embeddings,\n        })\n        \n      })\n\n\n      fetch(`${process.env.PUBLIC_URL}/data/`+dataset_name+`txt.json`)\n      .then(response => response.json())\n      .then(txt => {\n        this.setState({\n          txt: txt,\n        })\n      })\n\n\n\n      fetch(`${process.env.PUBLIC_URL}/data/`+dataset_name+`img_labels.json`)\n      .then(response => response.json())\n      .then(img_labels => {\n        this.setState({\n          img_labels: img_labels\n        })\n\n      })\n\n\n\n\n      \n  }\n\n  \n\n  render() {\n    return this.state.mnist_embeddings && this.state.mnist_labels ? (\n      <Layout\n        {...this.state}\n        algorithm_options={algorithm_options}\n        model_options={model_options}\n        dataset_options={dataset_options}\n        algorithm_embedding_keys={algorithm_embedding_keys}\n        model_embedding_keys={model_embedding_keys}\n      />\n    ) : (\n      <div style={{ padding: '1rem' }}>Loading data...</div>\n    )\n  }\n}\n\nexport default Data\n","import React, { Component } from 'react'\nimport './App.css'\nimport Data from './Data'\n\nclass App extends Component {\n  render() {\n    return <Data />\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}