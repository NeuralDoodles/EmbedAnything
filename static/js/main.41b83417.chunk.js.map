{"version":3,"sources":["Sidebar.js","Projection.js","About.js","Content.js","Layout.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","_Component","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","apply","arguments","_inherits","_createClass","key","value","props","setSidebarCanvas","side_canvas","handleSelectAlgorithm","bind","e","v","target","selectAlgorithm","_this","_this$props","sidebar_orientation","sidebar_image_size","grem","p","hover_index","mnist_labels","color_array","algorithm_options","algorithm_choice","React","createElement","style","display","flexDirection","justifyContent","flexGrow","padding","alignItems","onChange","map","option","index","ref","width","height","background","concat","join","color","transition","onClick","toggleAbout","Component","pointInPolygon","require","mnist_tile_locations","_toConsumableArray","Array","n","i","process","mnist_images","src","img","document","makeTextSprite","message","parameters","undefined","fontface","hasOwnProperty","fontsize","borderThickness","borderColor","r","g","b","a","backgroundColor","textColor","canvas","context","getContext","font","textWidth","measureText","fillStyle","strokeStyle","fillText","texture","THREE","needsUpdate","spriteMaterial","useScreenCoordinates","sprite","scale","set","Projection","call","handleResize","camera","aspect","updateProjectionMatrix","renderer","setSize","current_scale","getScaleFromZ","position","z","d3_x","x","d3_y","y","resize_transform","d3","translate","view","mount","d3_zoom","transform","state","init","_assertThisInitialized","addPoints","setUpCamera","animate","getZFromScale","changeEmbeddings","prev_choice","new_choice","_this2","ranges","start","sprite_side","end","sprite_number","push","embedding_chunks","range","algorithm_embedding_keys","slice","_loop","echunk","c","points","scene","children","numVertices","length","geometry","attributes","array","Float32Array","l","tween","TWEEN","to","easing","Linear","None","onUpdate","rvFOV","degToRad","fov","Math","tan","camera_z_position","fov_height","d3_transform","k","new_size","input","scale1","domain","clamp","zoomScaler","point_group","material","uniforms","size","camera_z_start","txt_embeddings","vFOV","xs","min_x","_","max_x","ys","min_y","max_y","max_x_from_center","m","abs","max_y_from_center","far","max","scaleExtent","on","zoomHandler","initial_scale","initial_transform","_this$props2","mnist_embeddings","img_embeddings","img_labels","console","log","label_chunks","loader","textures","t","load","flipY","magFilter","lchunk","vertices","embedding","vert","positions","offsets","colors","addAttribute","floor","repeat","sprite_image_size","clusterActive","vertexShader","fragmentShader","point_cloud","userData","sprite_index","add","_this$props3","txt","spritey","_this$props4","hover_container","transparent","point","frustumCulled","visible","digit_index","full_index","_this$props5","copyVector3sArray","offset","highlight_container","highlights","remove","mouse_position","_this$props6","sidebar_ctx","mouse_vector","_ref","_ref2","_slicedToArray","mouseX","mouseY","mouseToThree","raycaster","setFromCamera","params","Points","threshold","intersects","intersectObjects","intersect","sortIntersectsByDistanceToRay","object","setHoverIndex","highlightPoint","fillRect","drawImage","_this3","domElement","shiftKey","_d3$mouse","node","_d3$mouse2","checkIntersects","_this4","_this$props7","_ref3","_ref4","mouseToCoords","_ref5","_ref6","selectionPoints","addEventListener","lasso","clientX","clientY","checkinside","buttons","setFromPoints","line","polygon","pointsinside","reduce","_this$props8","setClearColor","appendChild","addBlankHighlightPoints","handleMouse","addtexts","requestAnimationFrame","render","prevProps","_this$props9","removeChild","_this5","_this$props10","overflow","About","left","top","right","bottom","paddingTop","overflowY","fontSize","lineHeight","className","textAlign","cursor","textDecoration","maxWidth","margin","Markdown","tb","lr","Layout","ww","wh","sidebar_height","show_about","checkHash","indexOf","setState","window","innerWidth","innerHeight","sidebar_mount","offsetHeight","imageSmoothingEnabled","ctx","history","pushState","location","pathname","hash","removeEventListener","nn50_mnist_embeddings","md08_umap_mnist_embeddings","_this$state","sidebar_style","main_style","font_size","_objectSpread","scaler","general_style","Data","embeddings","fetch","then","response","json","scaled_embeddings","scaleEmbeddings","Object","assign","App","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.41b83417.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass Sidebar extends Component {\n  componentDidMount() {\n    this.props.setSidebarCanvas(this.side_canvas)\n    this.handleSelectAlgorithm = this.handleSelectAlgorithm.bind(this)\n  }\n\n  handleSelectAlgorithm(e) {\n    let v = e.target.value\n    this.props.selectAlgorithm(v)\n  }\n\n  render() {\n    let {\n      sidebar_orientation,\n      sidebar_image_size,\n      grem,\n      p,\n      hover_index,\n      mnist_labels,\n      color_array,\n      algorithm_options,\n      algorithm_choice,\n    } = this.props\n\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'space-between',\n          flexGrow: 1,\n        }}\n      >\n        <div>\n          {' '}\n          <div\n            style={{\n              padding: grem / 2,\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center',\n            }}\n          >\n            <div>Algorithm:</div>\n            <select\n              onChange={this.handleSelectAlgorithm}\n              value={algorithm_options[algorithm_choice]}\n            >\n              {algorithm_options.map((option, index) => (\n                <option key={option} value={option}>\n                  {option}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div\n            style={{\n              display: 'flex',\n              flexDirection:\n                sidebar_orientation === 'horizontal' ? 'row' : 'column',\n            }}\n          >\n            <div>\n              <canvas\n                ref={side_canvas => {\n                  this.side_canvas = side_canvas\n                }}\n                width={sidebar_image_size}\n                height={sidebar_image_size}\n              />\n            </div>\n            <div style={{ flexGrow: 1 }}>\n              <div\n                style={{\n                  background: hover_index\n                    ? `rgb(${color_array[mnist_labels[hover_index]].join(',')})`\n                    : 'transparent',\n                  color: hover_index ? '#000' : '#fff',\n                  padding: p(grem / 4, grem / 2),\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                  transition: 'all 0.1s linear',\n                }}\n              >\n                <div>Label:</div>\n                {hover_index ? <div>{mnist_labels[hover_index]}</div> : null}\n              </div>\n              <div\n                style={{\n                  padding: p(grem / 4, grem / 2),\n                  display: 'flex',\n                  justifyContent: 'space-between',\n                }}\n              >\n                Index:\n                {hover_index ? <div>{hover_index}</div> : null}\n              </div>\n            </div>\n            <div><b>NOTE: Scroll up/down to zoom in/out<br /> <br />\n              Image and Text positions are synthetically genreated, meant only as placeholders\n              <br /> <br />\n              Hover-over-to-view is active for images only\n              <br /> <br />\n              Label and index will be used if additional metadata is included.\n              </b></div>\n\n          </div>\n        </div>\n        <div style={{ padding: grem / 2 }}>\n          <div>\n            A WIP Multimodal embedding viewer.{' '}\n            <button\n              onClick={() => {\n                this.props.toggleAbout(true)\n              }}\n            >\n              About\n            </button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Sidebar\n","import React, { Component } from 'react'\nimport * as THREE from 'three'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\nimport * as TWEEN from '@tweenjs/tween.js'\nvar pointInPolygon = require('point-in-polygon');\n//var polygon = [ [ 1, 1 ], [ 1, 2 ], [ 2, 2 ], [ 2, 1 ] ];\n\n//console.log(pointInPolygon([ 1.5, 1.5 ], polygon)); // true\n//console.log(pointInPolygon([ 4.9, 1.2 ], polygon)); // false\n//console.log(pointInPolygon([ 1.8, 1.1 ], polygon)); // true\n\n// Constants for sprite sheets - original\n/*let sprite_side = 73\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 14\nlet sprite_image_size = 28\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet mnist_tile_string = 'mnist_tile_solid_'\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/${mnist_tile_string}${i}.png`\n)\n\nlet mnist_images = mnist_tile_locations.map(src => {\n  let img = document.createElement('img')\n  img.src = src\n  return img\n})*/\n/////////////////\n\nlet sprite_side = 16\nlet sprite_size = sprite_side * sprite_side\nlet sprite_number = 19\nlet sprite_image_size = 128\n// actual sprite size needs to be power of 2\nlet sprite_actual_size = 2048\n\nlet mnist_tile_string = 'tile_'\nlet mnist_tile_locations = [...Array(sprite_number)].map(\n  (n, i) => `${process.env.PUBLIC_URL}/sprites/${mnist_tile_string}${i}.png`\n)\n\nlet mnist_images = mnist_tile_locations.map(src => {\n  let img = document.createElement('img')\n  img.src = src\n  return img\n})\n\nlet zoomScaler = input => {\n  let scale1 = d3\n    .scaleLinear()\n    .domain([20, 5])\n    .range([14, 28])\n    .clamp(true)\n  let scale2 = d3\n    .scaleLinear()\n    .domain([2, 0.1])\n    .range([28, 56])\n  if (input >= 5) {\n    return scale1(input)\n    // return 28\n  } else if (input <= 2) {\n    // return scale2(input)\n    return 28\n  } else {\n    return 28\n  }\n}\n\n\nfunction makeTextSprite( message, parameters )\n\n    {\n        if ( parameters === undefined ) parameters = {};\n        var fontface = parameters.hasOwnProperty(\"fontface\") ? parameters[\"fontface\"] : \"Cambria\";\n        var fontsize = parameters.hasOwnProperty(\"fontsize\") ? parameters[\"fontsize\"] : 18;\n        var borderThickness = parameters.hasOwnProperty(\"borderThickness\") ? parameters[\"borderThickness\"] : 4;\n        var borderColor = parameters.hasOwnProperty(\"borderColor\") ?parameters[\"borderColor\"] : { r:0, g:0, b:0, a:1.0 };\n        var backgroundColor = parameters.hasOwnProperty(\"backgroundColor\") ?parameters[\"backgroundColor\"] : { r:255, g:0, b:255, a:1.0 };\n        var textColor = parameters.hasOwnProperty(\"textColor\") ?parameters[\"textColor\"] : { r:0, g:0, b:0, a:1.0 };\n\n        var canvas = document.createElement('canvas');\n        var context = canvas.getContext('2d');\n        context.font = fontsize + \"px \" + fontface;\n        var metrics = context.measureText( message );\n        var textWidth = metrics.width;\n\n        context.fillStyle   = \"rgba(\" + backgroundColor.r + \",\" + backgroundColor.g + \",\" + backgroundColor.b + \",\" + backgroundColor.a + \")\";\n        context.strokeStyle = \"rgba(\" + borderColor.r + \",\" + borderColor.g + \",\" + borderColor.b + \",\" + borderColor.a + \")\";\n        context.fillStyle = \"rgba(\"+textColor.r+\", \"+textColor.g+\", \"+textColor.b+\", 1.0)\";\n       //context.fillText( message, borderThickness, fontsize + borderThickness);\n       context.fillText( message, borderThickness, fontsize + borderThickness, textWidth );\n\n        var texture = new THREE.Texture(canvas) \n        texture.needsUpdate = true;\n        var spriteMaterial = new THREE.SpriteMaterial( { map: texture, useScreenCoordinates: false } );\n        var sprite = new THREE.Sprite( spriteMaterial );\n        sprite.scale.set(0.1 * fontsize, 0.05 * fontsize, 0.75 * fontsize);\n        return sprite;  \n    }\n    \nclass Projection extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n    this.init = this.init.bind(this)\n    this.addPoints = this.addPoints.bind(this)\n    this.handleResize = this.handleResize.bind(this)\n    this.setUpCamera = this.setUpCamera.bind(this)\n    this.animate = this.animate.bind(this)\n    this.getScaleFromZ = this.getScaleFromZ.bind(this)\n    this.getZFromScale = this.getZFromScale.bind(this)\n    this.changeEmbeddings = this.changeEmbeddings.bind(this)\n  }\n\n  changeEmbeddings(prev_choice, new_choice) {\n    // assumes mnist embeddings has been updated\n\n    let ranges = []\n    for (let i = 0; i < sprite_number; i++) {\n      let start = i * sprite_size\n      let end = (i + 1) * sprite_size\n      if (i === sprite_number - 1) end = sprite_number * sprite_size\n      ranges.push([start, end])\n    }\n\n    let embedding_chunks = ranges.map(range =>\n      this.props[this.props.algorithm_embedding_keys[new_choice]].slice(\n        range[0],\n        range[1]\n      )\n    )\n\n    for (let c = 0; c < sprite_number; c++) {\n      let echunk = embedding_chunks[c]\n\n      let points = this.scene.children[0].children[c]\n      let numVertices = echunk.length\n      let position = points.geometry.attributes.position.array\n      let target = new Float32Array(numVertices * 3)\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 3) {\n        let x = echunk[i][0]\n        let y = echunk[i][1]\n        let z = 0\n        target[index] = x\n        target[index + 1] = y\n        target[index + 2] = z\n      }\n\n      let tween = new TWEEN.Tween(position)\n        .to(target, 1000)\n        .easing(TWEEN.Easing.Linear.None)\n      tween.onUpdate(function() {\n        points.geometry.attributes.position = new THREE.BufferAttribute(\n          position,\n          3\n        )\n        points.geometry.attributes.position.needsUpdate = true // required after the first render\n      })\n      tween.start()\n    }\n  }\n\n  getZFromScale(scale) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\n    let scale_height = this.props.height / scale\n    let camera_z_position = scale_height / (2 * Math.tan(rvFOV / 2))\n    return camera_z_position\n  }\n\n  getScaleFromZ(camera_z_position) {\n    let rvFOV = THREE.Math.degToRad(this.camera.fov)\n    let half_fov_height = Math.tan(rvFOV / 2) * camera_z_position\n    let fov_height = half_fov_height * 2\n    let scale = this.props.height / fov_height\n    return scale\n  }\n\n  \n  handleResize = (width, height) => {\n    this.camera.aspect = width / height\n    this.camera.updateProjectionMatrix()\n    this.renderer.setSize(width, height)\n    let current_scale = this.getScaleFromZ(this.camera.position.z)\n    let d3_x = -(this.camera.position.x * current_scale) + this.props.width / 2\n    let d3_y = this.camera.position.y * current_scale + this.props.height / 2\n    var resize_transform = d3.zoomIdentity\n      .translate(d3_x, d3_y)\n      .scale(current_scale)\n    let view = d3.select(this.mount)\n    this.d3_zoom.transform(view, resize_transform)\n\n  }\n\n  zoomHandler() {\n    let d3_transform = d3.event.transform\n\n    let scale = d3_transform.k\n    let x = -(d3_transform.x - this.props.width / 2) / scale\n    let y = (d3_transform.y - this.props.height / 2) / scale\n    let z = this.getZFromScale(scale)\n    this.camera.position.set(x, y, z)\n\n    // point size scales at end of zoom\n    let new_size = zoomScaler(z)\n    let point_group = this.scene.children[0].children\n    for (let c = 0; c < point_group.length; c++) {\n      point_group[c].material.uniforms.size.value = new_size\n    }\n  }\n\n  setUpCamera() {\n    let { width, height, txt_embeddings } = this.props\n\n    let aspect = this.camera.aspect\n    let vFOV = this.camera.fov\n    let rvFOV = THREE.Math.degToRad(vFOV)\n\n    let xs = txt_embeddings.map(e => e[0])\n    let min_x = _.min(xs)\n    let max_x = _.max(xs)\n    let ys = txt_embeddings.map(e => e[1])\n    let min_y = _.min(ys)\n    let max_y = _.max(ys)\n    let data_width = max_x - min_x\n    let data_height = max_y - min_y\n    let data_aspect = data_width / data_height\n\n    let max_x_from_center = _.max([min_x, max_x].map(m => Math.abs(m)))\n    let max_y_from_center = _.max([min_y, max_y].map(m => Math.abs(m)))\n\n    let max_center = Math.max(max_x_from_center, max_y_from_center)\n\n    let camera_z_start\n    if (data_aspect > aspect) {\n      // console.log(\"width is limiter\");\n      // camera_z_start = max_x_from_center / Math.tan(rvFOV / 2) / aspect\n    } else {\n      // console.log(\"height is limiter\");\n      // camera_z_start = max_y_from_center / Math.tan(rvFOV / 2)\n    }\n\n    camera_z_start = max_center / Math.tan(rvFOV / 2)\n\n    let far = camera_z_start * 1.25\n    this.camera.far = far\n    this.camera.position.z = camera_z_start * 1.1\n\n    // set up zoom\n    this.d3_zoom = d3\n      .zoom()\n      .scaleExtent([this.getScaleFromZ(far - 1), this.getScaleFromZ(0.1)])\n      .on('zoom', this.zoomHandler.bind(this))\n\n    let view = d3.select(this.mount)\n    this.view = view\n    view.call(this.d3_zoom)\n    let initial_scale = this.getScaleFromZ(this.camera.position.z)\n    var initial_transform = d3.zoomIdentity\n      .translate(width / 2, height / 2)\n      .scale(initial_scale)\n    this.d3_zoom.transform(view, initial_transform)\n  }\n\n  addPoints() {\n    let { mnist_embeddings,img_embeddings, mnist_labels, img_labels, color_array } = this.props\n\n    // split embeddings and labels into chunks to match sprites\n    let ranges = []\n    for (let i = 0; i < sprite_number; i++) {\n      let start = i * sprite_size\n      let end = (i + 1) * sprite_size\n      if (i === sprite_number - 1) end = sprite_number * sprite_size\n      ranges.push([start, end])\n    }\n\n    console.log(ranges)\n    let embedding_chunks = ranges.map(range =>\n      mnist_embeddings.slice(range[0], range[1])\n    )\n    let label_chunks = ranges.map(range =>\n      mnist_labels.slice(range[0], range[1])\n    )\n\n    // load the textures\n    let loader = new THREE.TextureLoader()\n    this.textures = mnist_tile_locations.map(l => {\n      let t = loader.load(l)\n      t.flipY = false\n      t.magFilter = THREE.NearestFilter\n      // t.minFilter = THREE.LinearMipMapLinearFilter;\n      return t\n    })\n\n    let point_group = new THREE.Group()\n    for (let c = 0; c < sprite_number; c++) {\n      let echunk = embedding_chunks[c]\n      let lchunk = label_chunks[c]\n\n      let vertices = []\n      for (let v = 0; v < echunk.length; v++) {\n        let embedding = echunk[v]\n        let vert = new THREE.Vector3(embedding[0], embedding[1], 0)\n        vertices[v] = vert\n      }\n\n      let geometry = new THREE.BufferGeometry()\n\n      let numVertices = vertices.length\n      let positions = new Float32Array(numVertices * 3)\n      let offsets = new Float32Array(numVertices * 2)\n      let colors = new Float32Array(numVertices * 3)\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\n      geometry.addAttribute('offset', new THREE.BufferAttribute(offsets, 2))\n      geometry.addAttribute('color', new THREE.BufferAttribute(colors, 3))\n\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 3) {\n        let x = echunk[i][0]\n        let y = echunk[i][1]\n        let z = 0\n        positions[index] = x\n        positions[index + 1] = y\n        positions[index + 2] = z\n      }\n\n      // geometry.attributes.position.copyVector3sArray(vertices)\n\n      let texture_subsize = 1 / sprite_side\n\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 2) {\n        let x = ((i % sprite_side) * sprite_image_size) / sprite_actual_size\n        let y =\n          (Math.floor(i / sprite_side) * sprite_image_size) / sprite_actual_size\n        offsets[index] = x\n        offsets[index + 1] = y\n      }\n\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 3) {\n        let color = color_array[lchunk[i]]\n        colors[index] = color[0] / 255\n        colors[index + 1] = color[1] / 255\n        colors[index + 2] = color[2] / 255\n      }\n\n      // uniforms\n      let uniforms = {\n        texture: { value: this.textures[c] },\n        repeat: { value: new THREE.Vector2(texture_subsize, texture_subsize) },\n        size: { value: this.sprite_image_size *50},\n        clusterActive:{ value:0.0}\n      };\n\n      let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        attribute vec3 cluster;\n        varying vec3 vCluster;\n        attribute float filteredActive;\n        varying float vFilteredActive;\n        uniform float clusterActive;\n        varying float vClusterActive;\n        uniform float size;\n        uniform float greyTransparency;\n        varying float vGreyTransparency;\n        uniform float imageTransparency;\n        varying float vImageTransparency;\n\n        void main() {\n          vOffset = offset;\n          vFilteredActive = filteredActive;\n          vCluster = cluster;\n          vClusterActive = clusterActive;\n          vGreyTransparency = greyTransparency;\n          vImageTransparency = imageTransparency;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`;\n\n      let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        varying vec3 vCluster;\n        varying float vClusterActive;\n        varying float vFilteredActive;\n        varying float vGreyTransparency;\n        varying float vImageTransparency;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\n          // make transparent images\n          if ( tex.a < 0.003 ) discard;\n\n          // Display clusters\n          vec4 replace_color = vec4(vCluster,1.0);\n          vec4 default_border_color = vec4(0.00392156863,0.00392156863,0.00392156863,0.0);\n          vec4 diff = tex - default_border_color;\n          float equality = float(dot(diff,diff) < 0.99 && vClusterActive > 0.9);\n          tex = mix( tex, replace_color, equality);\n           \n          // make transparent images\n          tex = mix( tex,  vec4(0.0,0.0,0.0,0.0), vImageTransparency);\n\n          // Grey images filter our selection \n          vec4 filterout_color = vec4(0.3,0.3,0.3,vGreyTransparency);\n          float filterout_equality = float(vFilteredActive > 0.9);\n          tex = mix( tex, filterout_color, filterout_equality );\n          gl_FragColor = tex; //* vec4(vColor, 1.0);\n        }`;\n\n      // material\n      let material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: vertex_shader,\n        fragmentShader: fragment_shader,\n      })\n\n      // point cloud\n      let point_cloud = new THREE.Points(geometry, material)\n      point_cloud.userData = { sprite_index: c }\n\n      point_group.add(point_cloud)\n\n      \n    }\n\n    this.scene.add(point_group)\n\n  }\n\n  addTextPoints() {\n    let { txt_embeddings, txt, color_array } = this.props\n\n\n\n    // load the textures\n    let loader = new THREE.TextureLoader()\n    this.textures = mnist_tile_locations.map(l => {\n      let t = loader.load(l)\n      t.flipY = false\n      t.magFilter = THREE.NearestFilter\n      // t.minFilter = THREE.LinearMipMapLinearFilter;\n      return t\n    })\n\n    let vertices = []\n\n    let point_group = new THREE.Group()\n    for (let c = 0; c < 500; c++) {\n            let vertices = []\n\n        let vert = new THREE.Vector3(txt_embeddings[0], txt_embeddings[1], -1)\n        vertices[c] = vert\n      \n\n      let geometry = new THREE.BufferGeometry()\n\n      let numVertices = vertices.length\n      let positions = new Float32Array(numVertices * 3)\n      let offsets = new Float32Array(numVertices * 2)\n      geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\n\n      for (let i = 0, index = 0, l = numVertices; i < l; i++, index += 3) {\n        let x = txt_embeddings[i][0]\n        let y = txt_embeddings[i][1]\n        let z = -1\n        positions[index] = x\n        positions[index + 1] = y\n        positions[index + 2] = z\n      }\n\n\n\n        var spritey = makeTextSprite( txt[c][1], \n\t\t{ fontsize: 15, textColor: {r:0, g:0, b:0, a:0.8}} );\n        spritey.position.set(txt_embeddings[c][0],txt_embeddings[c][1],-1);\n\n      // uniforms\n      let uniforms = {\n        texture: { value: spritey },\n        size: { value: sprite_image_size *0.1}, //size of icons\n      }\n\n      let vertex_shader = `\n        attribute vec2 offset;\n        varying vec2 vOffset;\n        attribute vec3 color;\n        varying vec3 vColor;\n        uniform float size;\n        void main() {\n          vOffset = offset;\n          vColor = color;\n          gl_PointSize = size;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }`\n\n      let fragment_shader = `\n        uniform sampler2D texture;\n        uniform vec2 repeat;\n        varying vec2 vOffset;\n        varying vec3 vColor;\n        void main() {\n          vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n          vec4 tex = texture2D( texture, uv * repeat + vOffset );\n          if ( tex.r < 0.5 ) discard;\n          tex.r = 1.0;\n          tex.g = 1.0;\n          tex.b = 1.0;\n          gl_FragColor = tex * vec4(vColor, 1.0);\n        }`\n\n      // material\n      let material = new THREE.ShaderMaterial({\n        uniforms: uniforms,\n        vertexShader: vertex_shader,\n        fragmentShader: fragment_shader,\n      })\n\n      // point cloud\n      let point_cloud = new THREE.Points(geometry, material)\n      point_cloud.userData = { sprite_index: c }\n\n      point_group.add(point_cloud)\n\n      \n    \n    }\n    this.scene.add(point_group)\n\n  }\n\n\n\n  addtexts(){\n    let { txt, txt_embeddings } = this.props\n\n    for (let c = 0; c < 400; c++){\n        var spritey = makeTextSprite( txt[c][1], \n\t\t{ fontsize: 13, textColor: {r:0, g:0, b:0, a:0.8}} );\n        spritey.position.set(txt_embeddings[c][0],txt_embeddings[c][1],-1);\n        this.scene.add( spritey );\n    }\n\n  }\n\n  addBlankHighlightPoints() {\n    let hover_container = new THREE.Group()\n    this.scene.add(hover_container)\n\n    let vert = new THREE.Vector3(0, 0, 0)\n    let vertices = [vert]\n    let geometry = new THREE.BufferGeometry()\n    let numVertices = vertices.length\n    var positions = new Float32Array(numVertices * 3) // 3 coordinates per point\n    var offsets = new Float32Array(numVertices * 2) // 2 coordinates per point\n    geometry.addAttribute('position', new THREE.BufferAttribute(positions, 3))\n    geometry.addAttribute('offset', new THREE.BufferAttribute(offsets, 2))\n\n    // all the attributes will be filled on hover\n    let texture_subsize = 1 / sprite_side\n\n    // uniforms\n    let uniforms = {\n      texture: { value: this.textures[0] },\n      repeat: { value: new THREE.Vector2(texture_subsize, texture_subsize) },\n      size: { value: 500.0 },\n    }\n\n    let vertex_shader = `\n    attribute vec2 offset;\n    varying vec2 vOffset;\n    uniform float size;\n    void main() {\n      vOffset = offset;\n      gl_PointSize = size;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n    }`;\n\nlet fragment_shader = `\n    uniform sampler2D texture;\n    uniform vec2 repeat;\n    varying vec2 vOffset;\n    void main() {\n      vec2 uv = vec2( gl_PointCoord.x, gl_PointCoord.y );\n      vec4 tex = texture2D( texture, uv * repeat + vOffset );\n      gl_FragColor = tex;\n    }`;\n\n    // material\n    var material = new THREE.ShaderMaterial({\n      uniforms: uniforms,\n      vertexShader: vertex_shader,\n      fragmentShader: fragment_shader,\n      transparent: true,\n    })\n\n    let point = new THREE.Points(geometry, material)\n    point.frustumCulled = false\n\n    this.scene.children[1].visible = false\n    this.scene.children[1].add(point)\n  }\n\n  highlightPoint(sprite_index, digit_index, full_index) {\n    let { algorithm_embedding_keys, algorithm_choice } = this.props\n\n    let point = this.scene.children[1].children[0]\n\n    let embedding = this.props[algorithm_embedding_keys[algorithm_choice]][\n      full_index\n    ]\n\n    let vert = new THREE.Vector3(embedding[0], embedding[1], 0)\n    let vertices = [vert]\n\n    var offsets = new Float32Array(2) // 2 coordinates per point\n\n    let x = ((digit_index % sprite_side) * 128) / 2048\n    let y = (Math.floor(digit_index / sprite_side) * 128) / 2048\n    offsets[0] = x\n    offsets[1] = y\n\n    point.geometry.attributes.position.copyVector3sArray(vertices)\n    point.geometry.attributes.position.needsUpdate = true // required after the first render\n    point.geometry.attributes.offset.array = offsets\n    point.geometry.attributes.offset.needsUpdate = true // required after the first render\n\n    // need to set attributes on geometry and uniforms on material\n    point.material.uniforms.texture.value = this.textures[sprite_index]\n  }\n\n  removeHighlights() {\n    let highlight_container = this.scene.children[1]\n    let highlights = highlight_container.children\n    highlight_container.remove(...highlights)\n  }\n\n  checkIntersects(mouse_position) {\n    let { width, height, sidebar_ctx, sidebar_image_size } = this.props\n\n    function mouseToThree([mouseX, mouseY]) {\n      return new THREE.Vector3(\n        (mouseX / width) * 2 - 1,\n        -(mouseY / height) * 2 + 1,\n        1\n      )\n    }\n\n\n    this.getScaleFromZ(this.camera.position.z)\n\n    function sortIntersectsByDistanceToRay(intersects) {\n      return _.sortBy(intersects, 'distanceToRay')\n    }\n\n    let mouse_vector = mouseToThree(mouse_position)\n    this.raycaster.setFromCamera(mouse_vector, this.camera)\n    this.raycaster.params.Points.threshold = 0.25\n    let intersects = this.raycaster.intersectObjects(\n      this.scene.children[0].children\n    )\n  \n    if (intersects[0]) {\n    console.log(\"hi\")\n      let sorted_intersects = sortIntersectsByDistanceToRay(intersects)\n      let intersect = sorted_intersects[0]\n      let sprite_index = intersect.object.userData.sprite_index\n      let digit_index = intersect.index\n      let full_index = sprite_index * sprite_size + digit_index\n      this.props.setHoverIndex(full_index)\n      this.highlightPoint(sprite_index, digit_index, full_index)\n      this.scene.children[1].visible = true\n\n      sidebar_ctx.fillRect(0, 0, sidebar_image_size, sidebar_image_size)\n      sidebar_ctx.drawImage(\n        mnist_images[sprite_index],\n        // source rectangle\n        (digit_index % sprite_side) * sprite_image_size,\n        Math.floor(digit_index / sprite_side) * sprite_image_size,\n        sprite_image_size,\n        sprite_image_size,\n        // destination rectangle\n        0,\n        0,\n        sidebar_image_size,\n        sidebar_image_size\n      )\n    } else {\n      this.props.setHoverIndex(null)\n      this.scene.children[1].visible = false\n      sidebar_ctx.fillRect(0, 0, sidebar_image_size, sidebar_image_size)\n    }\n  }\n\n  handleMouse() {\n    let view = d3.select(this.renderer.domElement)\n\n    this.raycaster = new THREE.Raycaster()\n\n    view.on('mousemove', () => {\n    if(!d3.event.shiftKey){\n        let [mouseX, mouseY] = d3.mouse(view.node())\n        let mouse_position = [mouseX, mouseY]\n        this.checkIntersects(mouse_position)\n    }})\n  }\n\n  handlelasso(){\n\n    let { width, height, sidebar_ctx, sidebar_image_size } = this.props\n\n    function mouseToThree([mouseX, mouseY],scale) {\n      return new THREE.Vector3(\n        scale*(( mouseX /width ) * 2 - 1.5),\n        -scale*((mouseY / height) * 2 - 1),\n        1\n      )\n    }\n\n    function mouseToCoords([mouseX, mouseY],scale) {\n        return [\n          scale*(( mouseX /width ) * 2 - 1.5),\n          -scale*((mouseY / height) * 2 - 1),\n        ]\n      }\n\n\n\n    this.selectionPoints = [];\n    const material = new THREE.LineBasicMaterial( { color: 0x0000ff } );\n            \n\n\n\n\tthis.renderer.domElement.addEventListener( 'pointerdown', e => {\n        this.lasso = [];\n\t\tthis.selectionPoints.length = 0;\n        this.points = []\n        this.points.push( mouseToCoords([e.clientX, e.clientY ],this.getScaleFromZ(this.camera.position.z)) );\n        this.lasso.push( mouseToThree([e.clientX, e.clientY ],this.getScaleFromZ(this.camera.position.z)) );\n\n        \n\t} );\n\n\tthis.renderer.domElement.addEventListener( 'pointerup', () => {\n        console.log(this.points)\n        let { mnist_embeddings } = this.props\n        this.checkinside(mnist_embeddings, this.points)\n        \n        \n    })\n\n    this.renderer.domElement.addEventListener( 'pointermove', e => {\n\n\t\t// If the left mouse button is not pressed\n\t\tif ( ( 1 & e.buttons ) === 0 ) {\n\n\t\t\treturn;\n\n\t\t}\n        this.points.push(mouseToCoords([e.clientX, e.clientY ],this.getScaleFromZ(this.camera.position.z)));    \n        this.lasso.push(mouseToThree([e.clientX, e.clientY ],this.getScaleFromZ(this.camera.position.z)));    \n\n        const geometry = new THREE.BufferGeometry().setFromPoints( this.lasso );\n\n        const line = new THREE.Line( geometry, material );\n        this.scene.add( line );\n    \n    } );\n\n  }\n\n  checkinside(points, polygon){\n    var pointsinside = points.map(point => {\n        return pointInPolygon(point, polygon);\n    });\n    const arrsum = arr => arr.reduce((a,b) => a*1.0 + b*1.0, 0)\n    console.log(arrsum(pointsinside))\n\n    \n\n\n  }\n\n\n  init() {\n    let { width, height } = this.props\n\n    this.scene = new THREE.Scene()\n    this.scene.background = new THREE.Color( '#ffffff' );\n\n\n    let vFOV = 75\n    let aspect = width / height\n    let near = 0.01\n    let far = 1000\n\n    this.camera = new THREE.PerspectiveCamera(vFOV, aspect, near, far)\n\n    this.renderer = new THREE.WebGLRenderer()\n    this.renderer.setClearColor(0x111111, 1)\n    this.renderer.setSize(width, height)\n    this.mount.appendChild(this.renderer.domElement)\n\n    this.addPoints()\n\n    this.addBlankHighlightPoints()\n\n    this.setUpCamera()\n\n    this.animate()\n\n    this.handleMouse()\n\n    this.addtexts()\n    //this.addTextPoints()\n    \n    //this.handlelasso()\n\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate)\n    TWEEN.update()\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  componentDidMount() {\n    this.init()\n  }\n\n  componentDidUpdate(prevProps) {\n    let { width, height } = this.props\n    if (width !== prevProps.width || height !== prevProps.height) {\n      this.handleResize(width, height)\n    }\n    if (prevProps.algorithm_choice !== this.props.algorithm_choice) {\n      this.changeEmbeddings(\n        prevProps.algorithm_choice,\n        this.props.algorithm_choice\n      )\n    }\n  }\n\n  componentWillUnmount() {\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\n  render() {\n    let { width, height } = this.props\n    return (\n      <div\n        style={{ width: width, height: height, overflow: 'hidden' }}\n        ref={mount => {\n          this.mount = mount\n        }}\n      />\n    )\n  }\n}\n\nexport default Projection\n","import React, { Component } from 'react'\nimport Markdown from 'react-remarkable'\nimport { about_text } from './Content'\n\nclass About extends Component {\n  render() {\n    let { grem, p } = this.props\n    return (\n      <div\n        style={{\n          position: 'fixed',\n          left: 0,\n          top: 0,\n          right: 0,\n          bottom: 0,\n          background: '#222',\n          color: '#fff',\n          paddingTop: grem * 2,\n          overflowY: 'auto',\n          fontSize: 16,\n          lineHeight: 1.5,\n        }}\n      >\n        <div\n          style={{\n            background: '#333',\n            position: 'fixed',\n            left: 0,\n            top: 0,\n            right: 0,\n            padding: grem / 2,\n          }}\n        >\n          About\n          <button\n            onClick={() => {\n              this.props.toggleAbout(false)\n            }}\n            className=\"hover-555\"\n            style={{\n              position: 'absolute',\n              right: 0,\n              top: 0,\n              height: grem * 2,\n              width: grem * 2,\n              padding: grem / 2,\n              textAlign: 'center',\n              cursor: 'pointer',\n              textDecoration: 'none',\n            }}\n          >\n            &times;\n          </button>\n        </div>\n        <div\n          style={{\n            maxWidth: grem * 30,\n            margin: '0 auto',\n            padding: grem / 2,\n            color: '#fff',\n          }}\n        >\n          <Markdown>{about_text}</Markdown>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default About\n","export let about_text = `\n# About EmbedAnything\nThis is an interactive visualization that embeds, clusters and analyses multimodal data.\n\n# About UMAP explorer\nThe tool is build upon UMAP explorer. The original code is viewable [on github](https://github.com/GrantCuster/umap-explorer).\n`\n","import React, { Component } from 'react'\nimport Sidebar from './Sidebar'\nimport Projection from './Projection'\nimport About from './About'\nimport * as _ from 'lodash'\n\n// padding constructor\nfunction p(tb, lr) {\n  return `${tb}px ${lr}px`\n}\n\nlet color_array = [\n  [141, 211, 199],\n  [255, 255, 179],\n  [190, 186, 218],\n  [251, 128, 114],\n  [128, 177, 211],\n  [253, 180, 98],\n  [179, 222, 105],\n  [252, 205, 229],\n  [188, 128, 189],\n  [204, 235, 197],\n]\n\nclass Layout extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      ww: null,\n      wh: null,\n      sidebar_height: null,\n      hover_index: null,\n      show_about: null,\n      algorithm_choice: 0,\n    }\n    this.sidebar_ctx = null\n    this.setSize = _.debounce(this.setSize.bind(this), 200)\n    this.checkHash = this.checkHash.bind(this)\n    this.setSidebarCanvas = this.setSidebarCanvas.bind(this)\n    this.toggleAbout = this.toggleAbout.bind(this)\n    this.selectAlgorithm = this.selectAlgorithm.bind(this)\n  }\n\n  selectAlgorithm(v) {\n    let i = this.props.algorithm_options.indexOf(v)\n    this.setState({ algorithm_choice: i })\n  }\n\n  setSize() {\n    this.setState({ ww: window.innerWidth, wh: window.innerHeight })\n    let sidebar_height = this.sidebar_mount.offsetHeight\n    this.setState({ sidebar_height: sidebar_height })\n    if (this.sidebar_ctx) this.sidebar_ctx.imageSmoothingEnabled = false\n  }\n\n  setSidebarCanvas(canvas) {\n    let ctx = canvas.getContext('2d')\n    ctx.imageSmoothingEnabled = false\n    this.sidebar_ctx = ctx\n  }\n\n  toggleAbout(state) {\n    if (state === true) {\n      window.history.pushState(null, 'About UMAP Explorer', '#about')\n      this.setState({ show_about: true })\n    } else if (state === false) {\n      window.history.pushState(null, 'UMAP Explorer', window.location.pathname)\n      this.setState({ show_about: false })\n    }\n  }\n\n  setHoverIndex(hover_index) {\n    this.setState({ hover_index: hover_index })\n  }\n\n  componentWillMount() {\n    this.setSize()\n    this.checkHash()\n  }\n\n  checkHash() {\n    if (window.location.hash && window.location.hash === '#about') {\n      this.setState({ show_about: true })\n    } else {\n      this.setState({ show_about: false })\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.setSize)\n    window.addEventListener('popstate', this.checkHash)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.setSize)\n  }\n\n  ////////\n  render() {\n    let {\n      mnist_embeddings,\n      txt,\n      txt_embeddings,\n      img_embeddings,\n      nn50_mnist_embeddings,\n      md08_umap_mnist_embeddings,\n      mnist_labels,\n      algorithm_options,\n      algorithm_embedding_keys,\n    } = this.props\n    let {\n      ww,\n      wh,\n      sidebar_height,\n      hover_index,\n      show_about,\n      algorithm_choice,\n    } = this.state\n    let sidebar_ctx = this.sidebar_ctx\n\n    let line_height = 1.5\n\n    let sidebar_style = {\n      position: 'absolute',\n      left: 0,\n      top: 0,\n      height: '100vh',\n      overflow: 'auto',\n      background: '#222',\n      display: 'flex',\n      flexDirection: 'column',\n    }\n    let main_style = {\n      position: 'relative',\n      height: '100vh',\n      background: '#111',\n      overflow: 'hidden',\n    }\n\n    let sidebar_image_size, sidebar_orientation\n    let font_size = 16\n    if (ww < 800) {\n      font_size = 14\n      sidebar_style = {\n        ...sidebar_style,\n        flexDirection: 'row',\n        width: '100%',\n        top: 'auto',\n        height: 'auto',\n        bottom: 0,\n      }\n      main_style = { width: ww, height: wh - sidebar_height }\n      sidebar_image_size = font_size * line_height * 3\n      sidebar_orientation = 'horizontal'\n    } else if (ww < 800 + 600) {\n      let scaler = 200 + (300 - 200) * ((ww - 800) / 600)\n      font_size = 14 + 2 * ((ww - 800) / 600)\n      sidebar_style = {\n        ...sidebar_style,\n        width: scaler,\n      }\n      sidebar_image_size = sidebar_style.width\n      main_style = {\n        ...main_style,\n        width: ww - scaler,\n        left: scaler,\n        height: wh,\n      }\n      sidebar_orientation = 'vertical'\n    } else {\n      sidebar_style = {\n        ...sidebar_style,\n        width: 300,\n      }\n      main_style = {\n        ...main_style,\n        width: ww - 300,\n        left: 300,\n        height: wh,\n      }\n      sidebar_image_size = sidebar_style.width\n      sidebar_orientation = 'vertical'\n    }\n\n    let grem = font_size * line_height\n\n    let general_style = {\n      fontSize: font_size,\n      lineHeight: line_height,\n    }\n\n    return ww !== null ? (\n      <div style={general_style}>\n        <div\n          style={sidebar_style}\n          ref={sidebar_mount => {\n            this.sidebar_mount = sidebar_mount\n          }}\n        >\n          <Sidebar\n            sidebar_orientation={sidebar_orientation}\n            sidebar_image_size={sidebar_image_size}\n            grem={grem}\n            p={p}\n            color_array={color_array}\n            setSidebarCanvas={this.setSidebarCanvas}\n            hover_index={hover_index}\n            mnist_labels={mnist_labels}\n            txt={txt}\n            toggleAbout={this.toggleAbout}\n            algorithm_options={algorithm_options}\n            algorithm_choice={algorithm_choice}\n            selectAlgorithm={this.selectAlgorithm}\n          />\n        </div>\n        <div style={main_style}>\n          <Projection\n            width={main_style.width}\n            height={main_style.height}\n            mnist_embeddings={mnist_embeddings}\n            txt={txt}\n            txt_embeddings={txt_embeddings} \n            img_embeddings={img_embeddings} \n            nn50_mnist_embeddings={nn50_mnist_embeddings}\n            md08_umap_mnist_embeddings={md08_umap_mnist_embeddings}\n            mnist_labels={mnist_labels}\n            color_array={color_array}\n            sidebar_ctx={sidebar_ctx}\n            sidebar_image_size={sidebar_image_size}\n            setHoverIndex={this.setHoverIndex.bind(this)}\n            algorithm_embedding_keys={algorithm_embedding_keys}\n            algorithm_choice={algorithm_choice}\n          />\n        </div>\n        {show_about ? (\n          <About grem={grem} p={p} toggleAbout={this.toggleAbout} />\n        ) : null}\n      </div>\n    ) : (\n      <div style={{ padding: '1rem' }}>Loading projections...</div>\n    )\n  }\n}\n\nexport default Layout\n","import React, { Component } from 'react'\nimport Layout from './Layout'\nimport * as _ from 'lodash'\nimport * as d3 from 'd3'\n\nlet algorithm_options = ['UMAP', 'UMAP min_dist=0.8', 'UMAP n_neighbors=50']\nlet algorithm_embedding_keys = [\n  'mnist_embeddings',\n  'md08_umap_mnist_embeddings',\n  'nn50_mnist_embeddings',\n]\n\nclass Data extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      mnist_embeddings: null,\n      mnist_labels: null,\n      md08_umap_mnist_embeddings: null,\n      txt_embeddings: null,\n    }\n  }\n\n  scaleEmbeddings(embeddings) {\n    let xs = embeddings.map(e => Math.abs(e[0]))\n    let ys = embeddings.map(e => Math.abs(e[1]))\n    let max_x = _.max(xs)\n    let max_y = _.max(ys)\n    let max = Math.max(max_x, max_y)\n    let scale = d3\n      .scaleLinear()\n      .domain([-max, max])\n      .range([-20, 20])\n    let scaled_embeddings = embeddings.map(e => [scale(e[0]), scale(e[1])])\n    return scaled_embeddings\n  }\n\n  componentDidMount() {\n    fetch(`${process.env.PUBLIC_URL}/mnist_embeddings.json`)\n      .then(response => response.json())\n      .then(mnist_embeddings => {\n        let scaled_embeddings = this.scaleEmbeddings(mnist_embeddings)\n        this.setState({\n          mnist_embeddings: scaled_embeddings,\n        })\n      })\n    fetch(`${process.env.PUBLIC_URL}/md08_umap_mnist_embeddings.json`)\n      .then(response => response.json())\n      .then(mnist_embeddings => {\n        let scaled_embeddings = this.scaleEmbeddings(mnist_embeddings)\n        console.log('got em')\n        this.setState({\n          md08_umap_mnist_embeddings: scaled_embeddings,\n        })\n      })\n    fetch(`${process.env.PUBLIC_URL}/nn50_mnist_embeddings.json`)\n      .then(response => response.json())\n      .then(mnist_embeddings => {\n        let scaled_embeddings = this.scaleEmbeddings(mnist_embeddings)\n        this.setState({\n          nn50_mnist_embeddings: scaled_embeddings,\n        })\n      })\n    fetch(`${process.env.PUBLIC_URL}/mnist_labels.json`)\n      .then(response => response.json())\n      .then(mnist_labels =>\n        this.setState({\n          mnist_labels: mnist_labels,\n        })\n      )\n\n      fetch(`${process.env.PUBLIC_URL}/txt_embeddings.json`)\n      .then(response => response.json())\n      .then(txt_embeddings => {\n        let scaled_embeddings = this.scaleEmbeddings(txt_embeddings)\n        this.setState({\n          txt_embeddings: scaled_embeddings,\n        })\n      })\n\n\n      fetch(`${process.env.PUBLIC_URL}/txt.json`)\n      .then(response => response.json())\n      .then(txt => {\n        this.setState({\n          txt: txt,\n        })\n      })\n\n      fetch(`${process.env.PUBLIC_URL}/img_embeddings.json`)\n      .then(response => response.json())\n      .then(img_embeddings => {\n        this.setState({\n          img_embeddings: img_embeddings,\n        })\n      })\n\n      fetch(`${process.env.PUBLIC_URL}/img_labels.json`)\n      .then(response => response.json())\n      .then(img_labels => {\n        this.setState({\n          img_labels: img_labels,\n        })\n      })\n\n      \n  }\n\n  \n\n  render() {\n    console.log(this.state)\n    return this.state.mnist_embeddings && this.state.mnist_labels ? (\n      <Layout\n        {...this.state}\n        algorithm_options={algorithm_options}\n        algorithm_embedding_keys={algorithm_embedding_keys}\n      />\n    ) : (\n      <div style={{ padding: '1rem' }}>Loading data...</div>\n    )\n  }\n}\n\nexport default Data\n","import React, { Component } from 'react'\nimport './App.css'\nimport Data from './Data'\n\nclass App extends Component {\n  render() {\n    return <Data />\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}